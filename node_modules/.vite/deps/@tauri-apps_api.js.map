{
  "version": 3,
  "sources": ["../../@tauri-apps/api/app.js", "../../@tauri-apps/api/image.js", "../../@tauri-apps/api/dpi.js", "../../@tauri-apps/api/event.js", "../../@tauri-apps/api/menu.js", "../../@tauri-apps/api/menu/base.js", "../../@tauri-apps/api/menu/menuItem.js", "../../@tauri-apps/api/menu/checkMenuItem.js", "../../@tauri-apps/api/menu/iconMenuItem.js", "../../@tauri-apps/api/menu/predefinedMenuItem.js", "../../@tauri-apps/api/menu/submenu.js", "../../@tauri-apps/api/menu/menu.js", "../../@tauri-apps/api/mocks.js", "../../@tauri-apps/api/path.js", "../../@tauri-apps/api/tray.js", "../../@tauri-apps/api/webview.js", "../../@tauri-apps/api/window.js", "../../@tauri-apps/api/webviewWindow.js"],
  "sourcesContent": ["import { invoke } from './core.js';\nimport { Image } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Application metadata and related APIs.\n *\n * @module\n */\n/**\n * Gets the application version.\n * @example\n * ```typescript\n * import { getVersion } from '@tauri-apps/api/app';\n * const appVersion = await getVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getVersion() {\n    return invoke('plugin:app|version');\n}\n/**\n * Gets the application name.\n * @example\n * ```typescript\n * import { getName } from '@tauri-apps/api/app';\n * const appName = await getName();\n * ```\n *\n * @since 1.0.0\n */\nasync function getName() {\n    return invoke('plugin:app|name');\n}\n/**\n * Gets the Tauri version.\n *\n * @example\n * ```typescript\n * import { getTauriVersion } from '@tauri-apps/api/app';\n * const tauriVersion = await getTauriVersion();\n * ```\n *\n * @since 1.0.0\n */\nasync function getTauriVersion() {\n    return invoke('plugin:app|tauri_version');\n}\n/**\n * Gets the application identifier.\n * @example\n * ```typescript\n * import { getIdentifier } from '@tauri-apps/api/app';\n * const identifier = await getIdentifier();\n * ```\n *\n * @returns The application identifier as configured in `tauri.conf.json`.\n *\n * @since 2.4.0\n */\nasync function getIdentifier() {\n    return invoke('plugin:app|identifier');\n}\n/**\n * Shows the application on macOS. This function does not automatically focus any specific app window.\n *\n * @example\n * ```typescript\n * import { show } from '@tauri-apps/api/app';\n * await show();\n * ```\n *\n * @since 1.2.0\n */\nasync function show() {\n    return invoke('plugin:app|app_show');\n}\n/**\n * Hides the application on macOS.\n *\n * @example\n * ```typescript\n * import { hide } from '@tauri-apps/api/app';\n * await hide();\n * ```\n *\n * @since 1.2.0\n */\nasync function hide() {\n    return invoke('plugin:app|app_hide');\n}\n/**\n * Fetches the data store identifiers on macOS and iOS.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers } from '@tauri-apps/api/app';\n * const ids = await fetchDataStoreIdentifiers();\n * ```\n *\n * @since 2.4.0\n */\nasync function fetchDataStoreIdentifiers() {\n    return invoke('plugin:app|fetch_data_store_identifiers');\n}\n/**\n * Removes the data store with the given identifier.\n *\n * Note that any webview using this data store should be closed before running this API.\n *\n * See https://developer.apple.com/documentation/webkit/wkwebsitedatastore for more information.\n *\n * @example\n * ```typescript\n * import { fetchDataStoreIdentifiers, removeDataStore } from '@tauri-apps/api/app';\n * for (const id of (await fetchDataStoreIdentifiers())) {\n *  await removeDataStore(id);\n * }\n * ```\n *\n * @since 2.4.0\n */\nasync function removeDataStore(uuid) {\n    return invoke('plugin:app|remove_data_store', { uuid });\n}\n/**\n * Get the default window icon.\n *\n * @example\n * ```typescript\n * import { defaultWindowIcon } from '@tauri-apps/api/app';\n * await defaultWindowIcon();\n * ```\n *\n * @since 2.0.0\n */\nasync function defaultWindowIcon() {\n    return invoke('plugin:app|default_window_icon').then((rid) => rid ? new Image(rid) : null);\n}\n/**\n * Set app's theme, pass in `null` or `undefined` to follow system theme\n *\n * @example\n * ```typescript\n * import { setTheme } from '@tauri-apps/api/app';\n * await setTheme('dark');\n * ```\n *\n * #### Platform-specific\n *\n * - **iOS / Android:** Unsupported.\n *\n * @since 2.0.0\n */\nasync function setTheme(theme) {\n    return invoke('plugin:app|set_app_theme', { theme });\n}\n/**\n * Sets the dock visibility for the application on macOS.\n *\n * @param visible whether the dock should be visible or not\n * @since 2.5.0\n */\nasync function setDockVisibility(visible) {\n    return invoke('plugin:app|set_dock_visibility', { visible });\n}\n\nexport { defaultWindowIcon, fetchDataStoreIdentifiers, getIdentifier, getName, getTauriVersion, getVersion, hide, removeDataStore, setDockVisibility, setTheme, show };\n", "import { Resource, invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** An RGBA Image in row-major order from top to bottom. */\nclass Image extends Resource {\n    /**\n     * Creates an Image from a resource ID. For internal use only.\n     *\n     * @ignore\n     */\n    constructor(rid) {\n        super(rid);\n    }\n    /** Creates a new Image using RGBA data, in row-major order from top to bottom, and with specified width and height. */\n    static async new(rgba, width, height) {\n        return invoke('plugin:image|new', {\n            rgba: transformImage(rgba),\n            width,\n            height\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided bytes by inferring the file format.\n     * If the format is known, prefer [@link Image.fromPngBytes] or [@link Image.fromIcoBytes].\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromBytes(bytes) {\n        return invoke('plugin:image|from_bytes', {\n            bytes: transformImage(bytes)\n        }).then((rid) => new Image(rid));\n    }\n    /**\n     * Creates a new image using the provided path.\n     *\n     * Only `ico` and `png` are supported (based on activated feature flag).\n     *\n     * Note that you need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    static async fromPath(path) {\n        return invoke('plugin:image|from_path', { path }).then((rid) => new Image(rid));\n    }\n    /** Returns the RGBA data for this image, in row-major order from top to bottom.  */\n    async rgba() {\n        return invoke('plugin:image|rgba', {\n            rid: this.rid\n        }).then((buffer) => new Uint8Array(buffer));\n    }\n    /** Returns the size of this image.  */\n    async size() {\n        return invoke('plugin:image|size', { rid: this.rid });\n    }\n}\n/**\n * Transforms image from various types into a type acceptable by Rust.\n *\n * See [tauri::image::JsImage](https://docs.rs/tauri/2/tauri/image/enum.JsImage.html) for more information.\n * Note the API signature is not stable and might change.\n */\nfunction transformImage(image) {\n    const ret = image == null\n        ? null\n        : typeof image === 'string'\n            ? image\n            : image instanceof Image\n                ? image.rid\n                : image;\n    return ret;\n}\n\nexport { Image, transformImage };\n", "import { SERIALIZE_TO_IPC_FN } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A size represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalSize {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.width = args[0].Logical.width;\n                this.height = args[0].Logical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the logical size to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalSize } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = new LogicalSize(400, 500);\n     * const physical = size.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalSize(this.width * scaleFactor, this.height * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalSize {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.width = args[0].Physical.width;\n                this.height = args[0].Physical.height;\n            }\n            else {\n                this.width = args[0].width;\n                this.height = args[0].height;\n            }\n        }\n        else {\n            this.width = args[0];\n            this.height = args[1];\n        }\n    }\n    /**\n     * Converts the physical size to a logical one.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const size = await appWindow.innerSize(); // PhysicalSize\n     * const logical = size.toLogical(factor);\n     * ```\n     */\n    toLogical(scaleFactor) {\n        return new LogicalSize(this.width / scaleFactor, this.height / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            width: this.width,\n            height: this.height\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A size represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Size` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Size`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = size instanceof LogicalSize\n *   ? { Logical: { width: size.width, height: size.height } }\n *   : { Physical: { width: size.width, height: size.height } }\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * You can just use {@linkcode Size}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalSize, PhysicalSize, Size } from '@tauri-apps/api/dpi';\n *\n * const size: LogicalSize | PhysicalSize = someFunction(); // where someFunction returns either LogicalSize or PhysicalSize\n * const validSize = new Size(size);\n * await invoke(\"do_something_with_size\", { size: validSize });\n * ```\n *\n * @since 2.1.0\n */\nclass Size {\n    constructor(size) {\n        this.size = size;\n    }\n    toLogical(scaleFactor) {\n        return this.size instanceof LogicalSize\n            ? this.size\n            : this.size.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.size instanceof PhysicalSize\n            ? this.size\n            : this.size.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.size.type}`]: {\n                width: this.size.width,\n                height: this.size.height\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in logical pixels.\n *\n * @since 2.0.0\n */\nclass LogicalPosition {\n    constructor(...args) {\n        this.type = 'Logical';\n        if (args.length === 1) {\n            if ('Logical' in args[0]) {\n                this.x = args[0].Logical.x;\n                this.y = args[0].Logical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the logical position to a physical one.\n     * @example\n     * ```typescript\n     * import { LogicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new LogicalPosition(400, 500);\n     * const physical = position.toPhysical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toPhysical(scaleFactor) {\n        return new PhysicalPosition(this.x * scaleFactor, this.y * scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n *  A position represented in physical pixels.\n *\n * @since 2.0.0\n */\nclass PhysicalPosition {\n    constructor(...args) {\n        this.type = 'Physical';\n        if (args.length === 1) {\n            if ('Physical' in args[0]) {\n                this.x = args[0].Physical.x;\n                this.y = args[0].Physical.y;\n            }\n            else {\n                this.x = args[0].x;\n                this.y = args[0].y;\n            }\n        }\n        else {\n            this.x = args[0];\n            this.y = args[1];\n        }\n    }\n    /**\n     * Converts the physical position to a logical one.\n     * @example\n     * ```typescript\n     * import { PhysicalPosition } from '@tauri-apps/api/dpi';\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     *\n     * const appWindow = getCurrentWindow();\n     * const factor = await appWindow.scaleFactor();\n     * const position = new PhysicalPosition(400, 500);\n     * const physical = position.toLogical(factor);\n     * ```\n     *\n     * @since 2.0.0\n     */\n    toLogical(scaleFactor) {\n        return new LogicalPosition(this.x / scaleFactor, this.y / scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            x: this.x,\n            y: this.y\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n/**\n * A position represented either in physical or in logical pixels.\n *\n * This type is basically a union type of {@linkcode LogicalSize} and {@linkcode PhysicalSize}\n * but comes in handy when using `tauri::Position` in Rust as an argument to a command, as this class\n * automatically serializes into a valid format so it can be deserialized correctly into `tauri::Position`\n *\n * So instead of\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = position instanceof LogicalPosition\n *   ? { Logical: { x: position.x, y: position.y } }\n *   : { Physical: { x: position.x, y: position.y } }\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * You can just use {@linkcode Position}\n * ```typescript\n * import { invoke } from '@tauri-apps/api/core';\n * import { LogicalPosition, PhysicalPosition, Position } from '@tauri-apps/api/dpi';\n *\n * const position: LogicalPosition | PhysicalPosition = someFunction(); // where someFunction returns either LogicalPosition or PhysicalPosition\n * const validPosition = new Position(position);\n * await invoke(\"do_something_with_position\", { position: validPosition });\n * ```\n *\n * @since 2.1.0\n */\nclass Position {\n    constructor(position) {\n        this.position = position;\n    }\n    toLogical(scaleFactor) {\n        return this.position instanceof LogicalPosition\n            ? this.position\n            : this.position.toLogical(scaleFactor);\n    }\n    toPhysical(scaleFactor) {\n        return this.position instanceof PhysicalPosition\n            ? this.position\n            : this.position.toPhysical(scaleFactor);\n    }\n    [SERIALIZE_TO_IPC_FN]() {\n        return {\n            [`${this.position.type}`]: {\n                x: this.position.x,\n                y: this.position.y\n            }\n        };\n    }\n    toJSON() {\n        // eslint-disable-next-line security/detect-object-injection\n        return this[SERIALIZE_TO_IPC_FN]();\n    }\n}\n\nexport { LogicalPosition, LogicalSize, PhysicalPosition, PhysicalSize, Position, Size };\n", "import { invoke, transformCallback } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The event system allows you to emit events to the backend and listen to events from it.\n *\n * This package is also accessible with `window.__TAURI__.event` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n/**\n * @since 1.1.0\n */\nvar TauriEvent;\n(function (TauriEvent) {\n    TauriEvent[\"WINDOW_RESIZED\"] = \"tauri://resize\";\n    TauriEvent[\"WINDOW_MOVED\"] = \"tauri://move\";\n    TauriEvent[\"WINDOW_CLOSE_REQUESTED\"] = \"tauri://close-requested\";\n    TauriEvent[\"WINDOW_DESTROYED\"] = \"tauri://destroyed\";\n    TauriEvent[\"WINDOW_FOCUS\"] = \"tauri://focus\";\n    TauriEvent[\"WINDOW_BLUR\"] = \"tauri://blur\";\n    TauriEvent[\"WINDOW_SCALE_FACTOR_CHANGED\"] = \"tauri://scale-change\";\n    TauriEvent[\"WINDOW_THEME_CHANGED\"] = \"tauri://theme-changed\";\n    TauriEvent[\"WINDOW_CREATED\"] = \"tauri://window-created\";\n    TauriEvent[\"WEBVIEW_CREATED\"] = \"tauri://webview-created\";\n    TauriEvent[\"DRAG_ENTER\"] = \"tauri://drag-enter\";\n    TauriEvent[\"DRAG_OVER\"] = \"tauri://drag-over\";\n    TauriEvent[\"DRAG_DROP\"] = \"tauri://drag-drop\";\n    TauriEvent[\"DRAG_LEAVE\"] = \"tauri://drag-leave\";\n})(TauriEvent || (TauriEvent = {}));\n/**\n * Unregister the event listener associated with the given name and id.\n *\n * @ignore\n * @param event The event name\n * @param eventId Event identifier\n * @returns\n */\nasync function _unlisten(event, eventId) {\n    await invoke('plugin:event|unlisten', {\n        event,\n        eventId\n    });\n}\n/**\n * Listen to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { listen } from '@tauri-apps/api/event';\n * const unlisten = await listen<string>('error', (event) => {\n *   console.log(`Got error, payload: ${event.payload}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function listen(event, handler, options) {\n    var _a;\n    const target = typeof (options === null || options === void 0 ? void 0 : options.target) === 'string'\n        ? { kind: 'AnyLabel', label: options.target }\n        : ((_a = options === null || options === void 0 ? void 0 : options.target) !== null && _a !== void 0 ? _a : { kind: 'Any' });\n    return invoke('plugin:event|listen', {\n        event,\n        target,\n        handler: transformCallback(handler)\n    }).then((eventId) => {\n        return async () => _unlisten(event, eventId);\n    });\n}\n/**\n * Listens once to an emitted event to any {@link EventTarget|target}.\n *\n * @example\n * ```typescript\n * import { once } from '@tauri-apps/api/event';\n * interface LoadedPayload {\n *   loggedIn: boolean,\n *   token: string\n * }\n * const unlisten = await once<LoadedPayload>('loaded', (event) => {\n *   console.log(`App is loaded, loggedIn: ${event.payload.loggedIn}, token: ${event.payload.token}`);\n * });\n *\n * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n * unlisten();\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param handler Event handler callback.\n * @param options Event listening options.\n * @returns A promise resolving to a function to unlisten to the event.\n * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n *\n * @since 1.0.0\n */\nasync function once(event, handler, options) {\n    return listen(event, (eventData) => {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        _unlisten(event, eventData.id);\n        handler(eventData);\n    }, options);\n}\n/**\n * Emits an event to all {@link EventTarget|targets}.\n *\n * @example\n * ```typescript\n * import { emit } from '@tauri-apps/api/event';\n * await emit('frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 1.0.0\n */\nasync function emit(event, payload) {\n    await invoke('plugin:event|emit', {\n        event,\n        payload\n    });\n}\n/**\n * Emits an event to all {@link EventTarget|targets} matching the given target.\n *\n * @example\n * ```typescript\n * import { emitTo } from '@tauri-apps/api/event';\n * await emitTo('main', 'frontend-loaded', { loggedIn: true, token: 'authToken' });\n * ```\n *\n * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n * @param payload Event payload.\n *\n * @since 2.0.0\n */\nasync function emitTo(target, event, payload) {\n    const eventTarget = typeof target === 'string' ? { kind: 'AnyLabel', label: target } : target;\n    await invoke('plugin:event|emit_to', {\n        target: eventTarget,\n        event,\n        payload\n    });\n}\n\nexport { TauriEvent, emit, emitTo, listen, once };\n", "export { Submenu, itemFromKind } from './menu/submenu.js';\nexport { MenuItem } from './menu/menuItem.js';\nexport { Menu } from './menu/menu.js';\nexport { CheckMenuItem } from './menu/checkMenuItem.js';\nexport { IconMenuItem, NativeIcon } from './menu/iconMenuItem.js';\nexport { PredefinedMenuItem } from './menu/predefinedMenuItem.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Menu types and utilities.\n *\n * This package is also accessible with `window.__TAURI__.menu` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n * @module\n */\n", "import { __classPrivateFieldGet, __classPrivateFieldSet } from '../external/tslib/tslib.es6.js';\nimport { Resource, Channel, invoke } from '../core.js';\nimport { transformImage } from '../image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nvar _MenuItemBase_id, _MenuItemBase_kind;\nfunction injectChannel(i) {\n    var _a;\n    if ('items' in i) {\n        i.items = (_a = i.items) === null || _a === void 0 ? void 0 : _a.map((item) => 'rid' in item ? item : injectChannel(item));\n    }\n    else if ('action' in i && i.action) {\n        const handler = new Channel();\n        handler.onmessage = i.action;\n        delete i.action;\n        return { ...i, handler };\n    }\n    return i;\n}\nasync function newMenu(kind, opts) {\n    const handler = new Channel();\n    if (opts && typeof opts === 'object') {\n        if ('action' in opts && opts.action) {\n            handler.onmessage = opts.action;\n            delete opts.action;\n        }\n        // about predefined menu item icon\n        if ('item' in opts\n            && opts.item\n            && typeof opts.item === 'object'\n            && 'About' in opts.item\n            && opts.item.About\n            && typeof opts.item.About === 'object'\n            && 'icon' in opts.item.About\n            && opts.item.About.icon) {\n            opts.item.About.icon = transformImage(opts.item.About.icon);\n        }\n        // icon menu item icon\n        if ('icon' in opts && opts.icon) {\n            opts.icon = transformImage(opts.icon);\n        }\n        // submenu items\n        if ('items' in opts && opts.items) {\n            function prepareItem(i) {\n                var _a;\n                if ('rid' in i) {\n                    return [i.rid, i.kind];\n                }\n                if ('item' in i && typeof i.item === 'object' && ((_a = i.item.About) === null || _a === void 0 ? void 0 : _a.icon)) {\n                    i.item.About.icon = transformImage(i.item.About.icon);\n                }\n                if ('icon' in i && i.icon) {\n                    i.icon = transformImage(i.icon);\n                }\n                if ('items' in i && i.items) {\n                    // @ts-expect-error the `prepareItem` return doesn't exactly match\n                    // this is fine, because the difference is in `[number, string]` variant\n                    i.items = i.items.map(prepareItem);\n                }\n                return injectChannel(i);\n            }\n            // @ts-expect-error the `prepareItem` return doesn't exactly match\n            // this is fine, because the difference is in `[number, string]` variant\n            opts.items = opts.items.map(prepareItem);\n        }\n    }\n    return invoke('plugin:menu|new', {\n        kind,\n        options: opts,\n        handler\n    });\n}\nclass MenuItemBase extends Resource {\n    /** The id of this item. */\n    get id() {\n        return __classPrivateFieldGet(this, _MenuItemBase_id, \"f\");\n    }\n    /** @ignore */\n    get kind() {\n        return __classPrivateFieldGet(this, _MenuItemBase_kind, \"f\");\n    }\n    /** @ignore */\n    constructor(rid, id, kind) {\n        super(rid);\n        /** @ignore */\n        _MenuItemBase_id.set(this, void 0);\n        /** @ignore */\n        _MenuItemBase_kind.set(this, void 0);\n        __classPrivateFieldSet(this, _MenuItemBase_id, id, \"f\");\n        __classPrivateFieldSet(this, _MenuItemBase_kind, kind, \"f\");\n    }\n}\n_MenuItemBase_id = new WeakMap(), _MenuItemBase_kind = new WeakMap();\n\nexport { MenuItemBase, newMenu };\n", "import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** A menu item inside a {@linkcode Menu} or {@linkcode Submenu} and contains only text. */\nclass MenuItem extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'MenuItem');\n    }\n    /** Create a new menu item. */\n    static async new(opts) {\n        return newMenu('MenuItem', opts).then(([rid, id]) => new MenuItem(rid, id));\n    }\n    /** Returns the text of this menu item. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this menu item. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this menu item is enabled or not. */\n    async isEnabled() {\n        return invoke('plugin:menu|is_enabled', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets whether this menu item is enabled or not. */\n    async setEnabled(enabled) {\n        return invoke('plugin:menu|set_enabled', {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this menu item. */\n    async setAccelerator(accelerator) {\n        return invoke('plugin:menu|set_accelerator', {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n}\n\nexport { MenuItem };\n", "import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A check menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains a text and a check mark or a similar toggle\n * that corresponds to a checked and unchecked states.\n */\nclass CheckMenuItem extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Check');\n    }\n    /** Create a new check menu item. */\n    static async new(opts) {\n        return newMenu('Check', opts).then(([rid, id]) => new CheckMenuItem(rid, id));\n    }\n    /** Returns the text of this check menu item. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this check menu item. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this check menu item is enabled or not. */\n    async isEnabled() {\n        return invoke('plugin:menu|is_enabled', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets whether this check menu item is enabled or not. */\n    async setEnabled(enabled) {\n        return invoke('plugin:menu|set_enabled', {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this check menu item. */\n    async setAccelerator(accelerator) {\n        return invoke('plugin:menu|set_accelerator', {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n    /** Returns whether this check menu item is checked or not. */\n    async isChecked() {\n        return invoke('plugin:menu|is_checked', { rid: this.rid });\n    }\n    /** Sets whether this check menu item is checked or not. */\n    async setChecked(checked) {\n        return invoke('plugin:menu|set_checked', {\n            rid: this.rid,\n            checked\n        });\n    }\n}\n\nexport { CheckMenuItem };\n", "import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\nimport { transformImage } from '../image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * A native Icon to be used for the menu item\n *\n * #### Platform-specific:\n *\n * - **Windows / Linux**: Unsupported.\n */\nvar NativeIcon;\n(function (NativeIcon) {\n    /** An add item template image. */\n    NativeIcon[\"Add\"] = \"Add\";\n    /** Advanced preferences toolbar icon for the preferences window. */\n    NativeIcon[\"Advanced\"] = \"Advanced\";\n    /** A Bluetooth template image. */\n    NativeIcon[\"Bluetooth\"] = \"Bluetooth\";\n    /** Bookmarks image suitable for a template. */\n    NativeIcon[\"Bookmarks\"] = \"Bookmarks\";\n    /** A caution image. */\n    NativeIcon[\"Caution\"] = \"Caution\";\n    /** A color panel toolbar icon. */\n    NativeIcon[\"ColorPanel\"] = \"ColorPanel\";\n    /** A column view mode template image. */\n    NativeIcon[\"ColumnView\"] = \"ColumnView\";\n    /** A computer icon. */\n    NativeIcon[\"Computer\"] = \"Computer\";\n    /** An enter full-screen mode template image. */\n    NativeIcon[\"EnterFullScreen\"] = \"EnterFullScreen\";\n    /** Permissions for all users. */\n    NativeIcon[\"Everyone\"] = \"Everyone\";\n    /** An exit full-screen mode template image. */\n    NativeIcon[\"ExitFullScreen\"] = \"ExitFullScreen\";\n    /** A cover flow view mode template image. */\n    NativeIcon[\"FlowView\"] = \"FlowView\";\n    /** A folder image. */\n    NativeIcon[\"Folder\"] = \"Folder\";\n    /** A burnable folder icon. */\n    NativeIcon[\"FolderBurnable\"] = \"FolderBurnable\";\n    /** A smart folder icon. */\n    NativeIcon[\"FolderSmart\"] = \"FolderSmart\";\n    /** A link template image. */\n    NativeIcon[\"FollowLinkFreestanding\"] = \"FollowLinkFreestanding\";\n    /** A font panel toolbar icon. */\n    NativeIcon[\"FontPanel\"] = \"FontPanel\";\n    /** A `go back` template image. */\n    NativeIcon[\"GoLeft\"] = \"GoLeft\";\n    /** A `go forward` template image. */\n    NativeIcon[\"GoRight\"] = \"GoRight\";\n    /** Home image suitable for a template. */\n    NativeIcon[\"Home\"] = \"Home\";\n    /** An iChat Theater template image. */\n    NativeIcon[\"IChatTheater\"] = \"IChatTheater\";\n    /** An icon view mode template image. */\n    NativeIcon[\"IconView\"] = \"IconView\";\n    /** An information toolbar icon. */\n    NativeIcon[\"Info\"] = \"Info\";\n    /** A template image used to denote invalid data. */\n    NativeIcon[\"InvalidDataFreestanding\"] = \"InvalidDataFreestanding\";\n    /** A generic left-facing triangle template image. */\n    NativeIcon[\"LeftFacingTriangle\"] = \"LeftFacingTriangle\";\n    /** A list view mode template image. */\n    NativeIcon[\"ListView\"] = \"ListView\";\n    /** A locked padlock template image. */\n    NativeIcon[\"LockLocked\"] = \"LockLocked\";\n    /** An unlocked padlock template image. */\n    NativeIcon[\"LockUnlocked\"] = \"LockUnlocked\";\n    /** A horizontal dash, for use in menus. */\n    NativeIcon[\"MenuMixedState\"] = \"MenuMixedState\";\n    /** A check mark template image, for use in menus. */\n    NativeIcon[\"MenuOnState\"] = \"MenuOnState\";\n    /** A MobileMe icon. */\n    NativeIcon[\"MobileMe\"] = \"MobileMe\";\n    /** A drag image for multiple items. */\n    NativeIcon[\"MultipleDocuments\"] = \"MultipleDocuments\";\n    /** A network icon. */\n    NativeIcon[\"Network\"] = \"Network\";\n    /** A path button template image. */\n    NativeIcon[\"Path\"] = \"Path\";\n    /** General preferences toolbar icon for the preferences window. */\n    NativeIcon[\"PreferencesGeneral\"] = \"PreferencesGeneral\";\n    /** A Quick Look template image. */\n    NativeIcon[\"QuickLook\"] = \"QuickLook\";\n    /** A refresh template image. */\n    NativeIcon[\"RefreshFreestanding\"] = \"RefreshFreestanding\";\n    /** A refresh template image. */\n    NativeIcon[\"Refresh\"] = \"Refresh\";\n    /** A remove item template image. */\n    NativeIcon[\"Remove\"] = \"Remove\";\n    /** A reveal contents template image. */\n    NativeIcon[\"RevealFreestanding\"] = \"RevealFreestanding\";\n    /** A generic right-facing triangle template image. */\n    NativeIcon[\"RightFacingTriangle\"] = \"RightFacingTriangle\";\n    /** A share view template image. */\n    NativeIcon[\"Share\"] = \"Share\";\n    /** A slideshow template image. */\n    NativeIcon[\"Slideshow\"] = \"Slideshow\";\n    /** A badge for a `smart` item. */\n    NativeIcon[\"SmartBadge\"] = \"SmartBadge\";\n    /** Small green indicator, similar to iChat's available image. */\n    NativeIcon[\"StatusAvailable\"] = \"StatusAvailable\";\n    /** Small clear indicator. */\n    NativeIcon[\"StatusNone\"] = \"StatusNone\";\n    /** Small yellow indicator, similar to iChat's idle image. */\n    NativeIcon[\"StatusPartiallyAvailable\"] = \"StatusPartiallyAvailable\";\n    /** Small red indicator, similar to iChat's unavailable image. */\n    NativeIcon[\"StatusUnavailable\"] = \"StatusUnavailable\";\n    /** A stop progress template image. */\n    NativeIcon[\"StopProgressFreestanding\"] = \"StopProgressFreestanding\";\n    /** A stop progress button template image. */\n    NativeIcon[\"StopProgress\"] = \"StopProgress\";\n    /** An image of the empty trash can. */\n    NativeIcon[\"TrashEmpty\"] = \"TrashEmpty\";\n    /** An image of the full trash can. */\n    NativeIcon[\"TrashFull\"] = \"TrashFull\";\n    /** Permissions for a single user. */\n    NativeIcon[\"User\"] = \"User\";\n    /** User account toolbar icon for the preferences window. */\n    NativeIcon[\"UserAccounts\"] = \"UserAccounts\";\n    /** Permissions for a group of users. */\n    NativeIcon[\"UserGroup\"] = \"UserGroup\";\n    /** Permissions for guests. */\n    NativeIcon[\"UserGuest\"] = \"UserGuest\";\n})(NativeIcon || (NativeIcon = {}));\n/**\n * An icon menu item inside a {@linkcode Menu} or {@linkcode Submenu}\n * and usually contains an icon and a text.\n */\nclass IconMenuItem extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Icon');\n    }\n    /** Create a new icon menu item. */\n    static async new(opts) {\n        return newMenu('Icon', opts).then(([rid, id]) => new IconMenuItem(rid, id));\n    }\n    /** Returns the text of this icon menu item. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this icon menu item. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this icon menu item is enabled or not. */\n    async isEnabled() {\n        return invoke('plugin:menu|is_enabled', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets whether this icon menu item is enabled or not. */\n    async setEnabled(enabled) {\n        return invoke('plugin:menu|set_enabled', {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /** Sets the accelerator for this icon menu item. */\n    async setAccelerator(accelerator) {\n        return invoke('plugin:menu|set_accelerator', {\n            rid: this.rid,\n            kind: this.kind,\n            accelerator\n        });\n    }\n    /** Sets an icon for this icon menu item */\n    async setIcon(icon) {\n        return invoke('plugin:menu|set_icon', {\n            rid: this.rid,\n            icon: transformImage(icon)\n        });\n    }\n}\n\nexport { IconMenuItem, NativeIcon };\n", "import { MenuItemBase, newMenu } from './base.js';\nimport { invoke } from '../core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** A predefined (native) menu item which has a predefined behavior by the OS or by tauri.  */\nclass PredefinedMenuItem extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Predefined');\n    }\n    /** Create a new predefined menu item. */\n    static async new(opts) {\n        return newMenu('Predefined', opts).then(([rid, id]) => new PredefinedMenuItem(rid, id));\n    }\n    /** Returns the text of this predefined menu item. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this predefined menu item. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n}\n\nexport { PredefinedMenuItem };\n", "import { MenuItem } from './menuItem.js';\nimport { CheckMenuItem } from './checkMenuItem.js';\nimport { IconMenuItem } from './iconMenuItem.js';\nimport { PredefinedMenuItem } from './predefinedMenuItem.js';\nimport { invoke } from '../core.js';\nimport { MenuItemBase, newMenu } from './base.js';\nimport { Position } from '../dpi.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction itemFromKind([rid, id, kind]) {\n    /* eslint-disable @typescript-eslint/no-unsafe-return */\n    switch (kind) {\n        case 'Submenu':\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new Submenu(rid, id);\n        case 'Predefined':\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new PredefinedMenuItem(rid, id);\n        case 'Check':\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new CheckMenuItem(rid, id);\n        case 'Icon':\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new IconMenuItem(rid, id);\n        case 'MenuItem':\n        default:\n            // @ts-expect-error constructor is protected for external usage only, safe for us to use\n            return new MenuItem(rid, id);\n    }\n    /* eslint-enable @typescript-eslint/no-unsafe-return */\n}\n/** A type that is a submenu inside a {@linkcode Menu} or {@linkcode Submenu}. */\nclass Submenu extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Submenu');\n    }\n    /** Create a new submenu. */\n    static async new(opts) {\n        return newMenu('Submenu', opts).then(([rid, id]) => new Submenu(rid, id));\n    }\n    /** Returns the text of this submenu. */\n    async text() {\n        return invoke('plugin:menu|text', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets the text for this submenu. */\n    async setText(text) {\n        return invoke('plugin:menu|set_text', {\n            rid: this.rid,\n            kind: this.kind,\n            text\n        });\n    }\n    /** Returns whether this submenu is enabled or not. */\n    async isEnabled() {\n        return invoke('plugin:menu|is_enabled', { rid: this.rid, kind: this.kind });\n    }\n    /** Sets whether this submenu is enabled or not. */\n    async setEnabled(enabled) {\n        return invoke('plugin:menu|set_enabled', {\n            rid: this.rid,\n            kind: this.kind,\n            enabled\n        });\n    }\n    /**\n     * Add a menu item to the end of this submenu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async append(items) {\n        return invoke('plugin:menu|append', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i)\n        });\n    }\n    /**\n     * Add a menu item to the beginning of this submenu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async prepend(items) {\n        return invoke('plugin:menu|prepend', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i)\n        });\n    }\n    /**\n     * Add a menu item to the specified position in this submenu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async insert(items, position) {\n        return invoke('plugin:menu|insert', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i),\n            position\n        });\n    }\n    /** Remove a menu item from this submenu. */\n    async remove(item) {\n        return invoke('plugin:menu|remove', {\n            rid: this.rid,\n            kind: this.kind,\n            item: [item.rid, item.kind]\n        });\n    }\n    /** Remove a menu item from this submenu at the specified position. */\n    async removeAt(position) {\n        return invoke('plugin:menu|remove_at', {\n            rid: this.rid,\n            kind: this.kind,\n            position\n        }).then(itemFromKind);\n    }\n    /** Returns a list of menu items that has been added to this submenu. */\n    async items() {\n        return invoke('plugin:menu|items', {\n            rid: this.rid,\n            kind: this.kind\n        }).then((i) => i.map(itemFromKind));\n    }\n    /** Retrieves the menu item matching the given identifier. */\n    async get(id) {\n        return invoke('plugin:menu|get', {\n            rid: this.rid,\n            kind: this.kind,\n            id\n        }).then((r) => (r ? itemFromKind(r) : null));\n    }\n    /**\n     * Popup this submenu as a context menu on the specified window.\n     *\n     * If the position, is provided, it is relative to the window's top-left corner.\n     */\n    async popup(at, window) {\n        var _a;\n        return invoke('plugin:menu|popup', {\n            rid: this.rid,\n            kind: this.kind,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null,\n            at: at instanceof Position ? at : at ? new Position(at) : null\n        });\n    }\n    /**\n     * Set this submenu as the Window menu for the application on macOS.\n     *\n     * This will cause macOS to automatically add window-switching items and\n     * certain other items to the menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows / Linux**: Unsupported.\n     */\n    async setAsWindowsMenuForNSApp() {\n        return invoke('plugin:menu|set_as_windows_menu_for_nsapp', {\n            rid: this.rid\n        });\n    }\n    /**\n     * Set this submenu as the Help menu for the application on macOS.\n     *\n     * This will cause macOS to automatically add a search box to the menu.\n     *\n     * If no menu is set as the Help menu, macOS will automatically use any menu\n     * which has a title matching the localized word \"Help\".\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows / Linux**: Unsupported.\n     */\n    async setAsHelpMenuForNSApp() {\n        return invoke('plugin:menu|set_as_help_menu_for_nsapp', {\n            rid: this.rid\n        });\n    }\n}\n\nexport { Submenu, itemFromKind };\n", "import { itemFromKind } from './submenu.js';\nimport { Position } from '../dpi.js';\nimport { invoke } from '../core.js';\nimport { MenuItemBase, newMenu } from './base.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** A type that is either a menu bar on the window\n * on Windows and Linux or as a global menu in the menubar on macOS.\n *\n * #### Platform-specific:\n *\n * - **macOS**: if using {@linkcode Menu} for the global menubar, it can only contain {@linkcode Submenu}s.\n */\nclass Menu extends MenuItemBase {\n    /** @ignore */\n    constructor(rid, id) {\n        super(rid, id, 'Menu');\n    }\n    /** Create a new menu. */\n    static async new(opts) {\n        return newMenu('Menu', opts).then(([rid, id]) => new Menu(rid, id));\n    }\n    /** Create a default menu. */\n    static async default() {\n        return invoke('plugin:menu|create_default').then(([rid, id]) => new Menu(rid, id));\n    }\n    /**\n     * Add a menu item to the end of this menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async append(items) {\n        return invoke('plugin:menu|append', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i)\n        });\n    }\n    /**\n     * Add a menu item to the beginning of this menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async prepend(items) {\n        return invoke('plugin:menu|prepend', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i)\n        });\n    }\n    /**\n     * Add a menu item to the specified position in this menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.\n     */\n    async insert(items, position) {\n        return invoke('plugin:menu|insert', {\n            rid: this.rid,\n            kind: this.kind,\n            items: (Array.isArray(items) ? items : [items]).map((i) => 'rid' in i ? [i.rid, i.kind] : i),\n            position\n        });\n    }\n    /** Remove a menu item from this menu. */\n    async remove(item) {\n        return invoke('plugin:menu|remove', {\n            rid: this.rid,\n            kind: this.kind,\n            item: [item.rid, item.kind]\n        });\n    }\n    /** Remove a menu item from this menu at the specified position. */\n    async removeAt(position) {\n        return invoke('plugin:menu|remove_at', {\n            rid: this.rid,\n            kind: this.kind,\n            position\n        }).then(itemFromKind);\n    }\n    /** Returns a list of menu items that has been added to this menu. */\n    async items() {\n        return invoke('plugin:menu|items', {\n            rid: this.rid,\n            kind: this.kind\n        }).then((i) => i.map(itemFromKind));\n    }\n    /** Retrieves the menu item matching the given identifier. */\n    async get(id) {\n        return invoke('plugin:menu|get', {\n            rid: this.rid,\n            kind: this.kind,\n            id\n        }).then((r) => (r ? itemFromKind(r) : null));\n    }\n    /**\n     * Popup this menu as a context menu on the specified window.\n     *\n     * If the position, is provided, it is relative to the window's top-left corner.\n     */\n    async popup(at, window) {\n        var _a;\n        return invoke('plugin:menu|popup', {\n            rid: this.rid,\n            kind: this.kind,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null,\n            at: at instanceof Position ? at : at ? new Position(at) : null\n        });\n    }\n    /**\n     * Sets the app-wide menu and returns the previous one.\n     *\n     * If a window was not created with an explicit menu or had one set explicitly,\n     * this menu will be assigned to it.\n     */\n    async setAsAppMenu() {\n        return invoke('plugin:menu|set_as_app_menu', {\n            rid: this.rid\n        }).then((r) => (r ? new Menu(r[0], r[1]) : null));\n    }\n    /**\n     * Sets the window menu and returns the previous one.\n     *\n     * #### Platform-specific:\n     *\n     * - **macOS:** Unsupported. The menu on macOS is app-wide and not specific to one\n     * window, if you need to set it, use {@linkcode Menu.setAsAppMenu} instead.\n     */\n    async setAsWindowMenu(window) {\n        var _a;\n        return invoke('plugin:menu|set_as_window_menu', {\n            rid: this.rid,\n            window: (_a = window === null || window === void 0 ? void 0 : window.label) !== null && _a !== void 0 ? _a : null\n        }).then((r) => (r ? new Menu(r[0], r[1]) : null));\n    }\n}\n\nexport { Menu };\n", "// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\nfunction mockInternals() {\n    var _a;\n    window.__TAURI_INTERNALS__ = (_a = window.__TAURI_INTERNALS__) !== null && _a !== void 0 ? _a : {};\n}\n/**\n * Intercepts all IPC requests with the given mock handler.\n *\n * This function can be used when testing tauri frontend applications or when running the frontend in a Node.js context during static site generation.\n *\n * # Examples\n *\n * Testing setup using Vitest:\n * ```js\n * import { mockIPC, clearMocks } from \"@tauri-apps/api/mocks\"\n * import { invoke } from \"@tauri-apps/api/core\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked command\", () => {\n *  mockIPC((cmd, payload) => {\n *   switch (cmd) {\n *     case \"add\":\n *       return (payload.a as number) + (payload.b as number);\n *     default:\n *       break;\n *     }\n *  });\n *\n *  expect(invoke('add', { a: 12, b: 15 })).resolves.toBe(27);\n * })\n * ```\n *\n * The callback function can also return a Promise:\n * ```js\n * import { mockIPC, clearMocks } from \"@tauri-apps/api/mocks\"\n * import { invoke } from \"@tauri-apps/api/core\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked command\", () => {\n *  mockIPC((cmd, payload) => {\n *   if(cmd === \"get_data\") {\n *    return fetch(\"https://example.com/data.json\")\n *      .then((response) => response.json())\n *   }\n *  });\n *\n *  expect(invoke('get_data')).resolves.toBe({ foo: 'bar' });\n * })\n * ```\n *\n * @since 1.0.0\n */\nfunction mockIPC(cb) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.transformCallback = function transformCallback(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback, once = false) {\n        const identifier = window.crypto.getRandomValues(new Uint32Array(1))[0];\n        const prop = `_${identifier}`;\n        Object.defineProperty(window, prop, {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            value: (result) => {\n                if (once) {\n                    Reflect.deleteProperty(window, prop);\n                }\n                return callback && callback(result);\n            },\n            writable: false,\n            configurable: true\n        });\n        return identifier;\n    };\n    // eslint-disable-next-line @typescript-eslint/require-await\n    window.__TAURI_INTERNALS__.invoke = async function (cmd, args, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    options) {\n        return cb(cmd, args);\n    };\n}\n/**\n * Mocks one or many window labels.\n * In non-tauri context it is required to call this function *before* using the `@tauri-apps/api/window` module.\n *\n * This function only mocks the *presence* of windows,\n * window properties (e.g. width and height) can be mocked like regular IPC calls using the `mockIPC` function.\n *\n * # Examples\n *\n * ```js\n * import { mockWindows } from \"@tauri-apps/api/mocks\";\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n *\n * mockWindows(\"main\", \"second\", \"third\");\n *\n * const win = getCurrentWindow();\n *\n * win.label // \"main\"\n * ```\n *\n * ```js\n * import { mockWindows } from \"@tauri-apps/api/mocks\";\n *\n * mockWindows(\"main\", \"second\", \"third\");\n *\n * mockIPC((cmd, args) => {\n *  if (cmd === \"plugin:event|emit\") {\n *    console.log('emit event', args?.event, args?.payload);\n *  }\n * });\n *\n * const { emit } = await import(\"@tauri-apps/api/event\");\n * await emit('loaded'); // this will cause the mocked IPC handler to log to the console.\n * ```\n *\n * @param current Label of window this JavaScript context is running in.\n *\n * @since 1.0.0\n */\nfunction mockWindows(current, ..._additionalWindows) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.metadata = {\n        currentWindow: { label: current },\n        currentWebview: { windowLabel: current, label: current }\n    };\n}\n/**\n * Mock `convertFileSrc` function\n *\n *\n * @example\n * ```js\n * import { mockConvertFileSrc } from \"@tauri-apps/api/mocks\";\n * import { convertFileSrc } from \"@tauri-apps/api/core\";\n *\n * mockConvertFileSrc(\"windows\")\n *\n * const url = convertFileSrc(\"C:\\\\Users\\\\user\\\\file.txt\")\n * ```\n *\n * @param osName The operating system to mock, can be one of linux, macos, or windows\n *\n * @since 1.6.0\n */\nfunction mockConvertFileSrc(osName) {\n    mockInternals();\n    window.__TAURI_INTERNALS__.convertFileSrc = function (filePath, protocol = 'asset') {\n        const path = encodeURIComponent(filePath);\n        return osName === 'windows'\n            ? `http://${protocol}.localhost/${path}`\n            : `${protocol}://localhost/${path}`;\n    };\n}\n/**\n * Clears mocked functions/data injected by the other functions in this module.\n * When using a test runner that doesn't provide a fresh window object for each test, calling this function will reset tauri specific properties.\n *\n * # Example\n *\n * ```js\n * import { mockWindows, clearMocks } from \"@tauri-apps/api/mocks\"\n *\n * afterEach(() => {\n *    clearMocks()\n * })\n *\n * test(\"mocked windows\", () => {\n *    mockWindows(\"main\", \"second\", \"third\");\n *\n *    expect(window.__TAURI_INTERNALS__).toHaveProperty(\"metadata\")\n * })\n *\n * test(\"no mocked windows\", () => {\n *    expect(window.__TAURI_INTERNALS__).not.toHaveProperty(\"metadata\")\n * })\n * ```\n *\n * @since 1.0.0\n */\nfunction clearMocks() {\n    var _a, _b, _c;\n    if (typeof window.__TAURI_INTERNALS__ !== 'object') {\n        return;\n    }\n    if ((_a = window.__TAURI_INTERNALS__) === null || _a === void 0 ? void 0 : _a.convertFileSrc)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.convertFileSrc;\n    if ((_b = window.__TAURI_INTERNALS__) === null || _b === void 0 ? void 0 : _b.invoke)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.invoke;\n    if ((_c = window.__TAURI_INTERNALS__) === null || _c === void 0 ? void 0 : _c.metadata)\n        // @ts-expect-error \"The operand of a 'delete' operator must be optional' does not matter in this case\n        delete window.__TAURI_INTERNALS__.metadata;\n}\n\nexport { clearMocks, mockConvertFileSrc, mockIPC, mockWindows };\n", "import { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * The path module provides utilities for working with file and directory paths.\n *\n * This package is also accessible with `window.__TAURI__.path` when [`app.withGlobalTauri`](https://v2.tauri.app/reference/config/#withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * @since 2.0.0\n */\nvar BaseDirectory;\n(function (BaseDirectory) {\n    /**\n     * @see {@link audioDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Audio\"] = 1] = \"Audio\";\n    /**\n     * @see {@link cacheDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Cache\"] = 2] = \"Cache\";\n    /**\n     * @see {@link configDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Config\"] = 3] = \"Config\";\n    /**\n     * @see {@link dataDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Data\"] = 4] = \"Data\";\n    /**\n     * @see {@link localDataDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"LocalData\"] = 5] = \"LocalData\";\n    /**\n     * @see {@link documentDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Document\"] = 6] = \"Document\";\n    /**\n     * @see {@link downloadDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Download\"] = 7] = \"Download\";\n    /**\n     * @see {@link pictureDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Picture\"] = 8] = \"Picture\";\n    /**\n     * @see {@link publicDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Public\"] = 9] = \"Public\";\n    /**\n     * @see {@link videoDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Video\"] = 10] = \"Video\";\n    /**\n     * @see {@link resourceDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Resource\"] = 11] = \"Resource\";\n    /**\n     * @see {@link tempDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Temp\"] = 12] = \"Temp\";\n    /**\n     * @see {@link appConfigDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"AppConfig\"] = 13] = \"AppConfig\";\n    /**\n     * @see {@link appDataDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"AppData\"] = 14] = \"AppData\";\n    /**\n     * @see {@link appLocalDataDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"AppLocalData\"] = 15] = \"AppLocalData\";\n    /**\n     * @see {@link appCacheDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"AppCache\"] = 16] = \"AppCache\";\n    /**\n     * @see {@link appLogDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"AppLog\"] = 17] = \"AppLog\";\n    /**\n     * @see {@link desktopDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Desktop\"] = 18] = \"Desktop\";\n    /**\n     * @see {@link executableDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Executable\"] = 19] = \"Executable\";\n    /**\n     * @see {@link fontDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Font\"] = 20] = \"Font\";\n    /**\n     * @see {@link homeDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Home\"] = 21] = \"Home\";\n    /**\n     * @see {@link runtimeDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Runtime\"] = 22] = \"Runtime\";\n    /**\n     * @see {@link templateDir} for more information.\n     */\n    BaseDirectory[BaseDirectory[\"Template\"] = 23] = \"Template\";\n})(BaseDirectory || (BaseDirectory = {}));\n/**\n * Returns the path to the suggested directory for your app's config files.\n * Resolves to `${configDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appConfigDir } from '@tauri-apps/api/path';\n * const appConfigDirPath = await appConfigDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appConfigDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppConfig\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's data files.\n * Resolves to `${dataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's local data files.\n * Resolves to `${localDataDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appLocalDataDir } from '@tauri-apps/api/path';\n * const appLocalDataDirPath = await appLocalDataDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLocalDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppLocalData\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's cache files.\n * Resolves to `${cacheDir}/${bundleIdentifier}`, where `bundleIdentifier` is the [`identifier`](https://v2.tauri.app/reference/config/#identifier) value configured in `tauri.conf.json`.\n * @example\n * ```typescript\n * import { appCacheDir } from '@tauri-apps/api/path';\n * const appCacheDirPath = await appCacheDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appCacheDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppCache\n    });\n}\n/**\n * Returns the path to the user's audio directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_MUSIC_DIR`.\n * - **macOS:** Resolves to `$HOME/Music`.\n * - **Windows:** Resolves to `{FOLDERID_Music}`.\n * @example\n * ```typescript\n * import { audioDir } from '@tauri-apps/api/path';\n * const audioDirPath = await audioDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function audioDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Audio\n    });\n}\n/**\n * Returns the path to the user's cache directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CACHE_HOME` or `$HOME/.cache`.\n * - **macOS:** Resolves to `$HOME/Library/Caches`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { cacheDir } from '@tauri-apps/api/path';\n * const cacheDirPath = await cacheDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function cacheDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Cache\n    });\n}\n/**\n * Returns the path to the user's config directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_CONFIG_HOME` or `$HOME/.config`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { configDir } from '@tauri-apps/api/path';\n * const configDirPath = await configDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function configDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Config\n    });\n}\n/**\n * Returns the path to the user's data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_RoamingAppData}`.\n * @example\n * ```typescript\n * import { dataDir } from '@tauri-apps/api/path';\n * const dataDirPath = await dataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function dataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Data\n    });\n}\n/**\n * Returns the path to the user's desktop directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DESKTOP_DIR`.\n * - **macOS:** Resolves to `$HOME/Desktop`.\n * - **Windows:** Resolves to `{FOLDERID_Desktop}`.\n * @example\n * ```typescript\n * import { desktopDir } from '@tauri-apps/api/path';\n * const desktopPath = await desktopDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function desktopDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Desktop\n    });\n}\n/**\n * Returns the path to the user's document directory.\n * @example\n * ```typescript\n * import { documentDir } from '@tauri-apps/api/path';\n * const documentDirPath = await documentDir();\n * ```\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOCUMENTS_DIR`.\n * - **macOS:** Resolves to `$HOME/Documents`.\n * - **Windows:** Resolves to `{FOLDERID_Documents}`.\n *\n * @since 1.0.0\n */\nasync function documentDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Document\n    });\n}\n/**\n * Returns the path to the user's download directory.\n *\n * #### Platform-specific\n *\n * - **Linux**: Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_DOWNLOAD_DIR`.\n * - **macOS**: Resolves to `$HOME/Downloads`.\n * - **Windows**: Resolves to `{FOLDERID_Downloads}`.\n * @example\n * ```typescript\n * import { downloadDir } from '@tauri-apps/api/path';\n * const downloadDirPath = await downloadDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function downloadDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Download\n    });\n}\n/**\n * Returns the path to the user's executable directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_BIN_HOME/../bin` or `$XDG_DATA_HOME/../bin` or `$HOME/.local/bin`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { executableDir } from '@tauri-apps/api/path';\n * const executableDirPath = await executableDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function executableDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Executable\n    });\n}\n/**\n * Returns the path to the user's font directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME/fonts` or `$HOME/.local/share/fonts`.\n * - **macOS:** Resolves to `$HOME/Library/Fonts`.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { fontDir } from '@tauri-apps/api/path';\n * const fontDirPath = await fontDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function fontDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Font\n    });\n}\n/**\n * Returns the path to the user's home directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$HOME`.\n * - **macOS:** Resolves to `$HOME`.\n * - **Windows:** Resolves to `{FOLDERID_Profile}`.\n * @example\n * ```typescript\n * import { homeDir } from '@tauri-apps/api/path';\n * const homeDirPath = await homeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function homeDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Home\n    });\n}\n/**\n * Returns the path to the user's local data directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_DATA_HOME` or `$HOME/.local/share`.\n * - **macOS:** Resolves to `$HOME/Library/Application Support`.\n * - **Windows:** Resolves to `{FOLDERID_LocalAppData}`.\n * @example\n * ```typescript\n * import { localDataDir } from '@tauri-apps/api/path';\n * const localDataDirPath = await localDataDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function localDataDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.LocalData\n    });\n}\n/**\n * Returns the path to the user's picture directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PICTURES_DIR`.\n * - **macOS:** Resolves to `$HOME/Pictures`.\n * - **Windows:** Resolves to `{FOLDERID_Pictures}`.\n * @example\n * ```typescript\n * import { pictureDir } from '@tauri-apps/api/path';\n * const pictureDirPath = await pictureDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function pictureDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Picture\n    });\n}\n/**\n * Returns the path to the user's public directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_PUBLICSHARE_DIR`.\n * - **macOS:** Resolves to `$HOME/Public`.\n * - **Windows:** Resolves to `{FOLDERID_Public}`.\n * @example\n * ```typescript\n * import { publicDir } from '@tauri-apps/api/path';\n * const publicDirPath = await publicDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function publicDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Public\n    });\n}\n/**\n * Returns the path to the application's resource directory.\n * To resolve a resource path, see the [[resolveResource | `resolveResource API`]].\n * @example\n * ```typescript\n * import { resourceDir } from '@tauri-apps/api/path';\n * const resourceDirPath = await resourceDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function resourceDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Resource\n    });\n}\n/**\n * Resolve the path to a resource file.\n * @example\n * ```typescript\n * import { resolveResource } from '@tauri-apps/api/path';\n * const resourcePath = await resolveResource('script.sh');\n * ```\n *\n * @param resourcePath The path to the resource.\n * Must follow the same syntax as defined in `tauri.conf.json > bundle > resources`, i.e. keeping subfolders and parent dir components (`../`).\n * @returns The full path to the resource.\n *\n * @since 1.0.0\n */\nasync function resolveResource(resourcePath) {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Resource,\n        path: resourcePath\n    });\n}\n/**\n * Returns the path to the user's runtime directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `$XDG_RUNTIME_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Not supported.\n * @example\n * ```typescript\n * import { runtimeDir } from '@tauri-apps/api/path';\n * const runtimeDirPath = await runtimeDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function runtimeDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Runtime\n    });\n}\n/**\n * Returns the path to the user's template directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_TEMPLATES_DIR`.\n * - **macOS:** Not supported.\n * - **Windows:** Resolves to `{FOLDERID_Templates}`.\n * @example\n * ```typescript\n * import { templateDir } from '@tauri-apps/api/path';\n * const templateDirPath = await templateDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function templateDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Template\n    });\n}\n/**\n * Returns the path to the user's video directory.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to [`xdg-user-dirs`](https://www.freedesktop.org/wiki/Software/xdg-user-dirs/)' `XDG_VIDEOS_DIR`.\n * - **macOS:** Resolves to `$HOME/Movies`.\n * - **Windows:** Resolves to `{FOLDERID_Videos}`.\n * @example\n * ```typescript\n * import { videoDir } from '@tauri-apps/api/path';\n * const videoDirPath = await videoDir();\n * ```\n *\n * @since 1.0.0\n */\nasync function videoDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Video\n    });\n}\n/**\n * Returns the path to the suggested directory for your app's log files.\n *\n * #### Platform-specific\n *\n * - **Linux:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * - **macOS:** Resolves to `${homeDir}/Library/Logs/{bundleIdentifier}`\n * - **Windows:** Resolves to `${configDir}/${bundleIdentifier}/logs`.\n * @example\n * ```typescript\n * import { appLogDir } from '@tauri-apps/api/path';\n * const appLogDirPath = await appLogDir();\n * ```\n *\n * @since 1.2.0\n */\nasync function appLogDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.AppLog\n    });\n}\n/**\n * Returns a temporary directory.\n * @example\n * ```typescript\n * import { tempDir } from '@tauri-apps/api/path';\n * const temp = await tempDir();\n * ```\n *\n * @since 2.0.0\n */\nasync function tempDir() {\n    return invoke('plugin:path|resolve_directory', {\n        directory: BaseDirectory.Temp\n    });\n}\n/**\n * Returns the platform-specific path segment separator:\n * - `\\` on Windows\n * - `/` on POSIX\n *\n * @since 2.0.0\n */\nfunction sep() {\n    return window.__TAURI_INTERNALS__.plugins.path.sep;\n}\n/**\n * Returns the platform-specific path segment delimiter:\n * - `;` on Windows\n * - `:` on POSIX\n *\n * @since 2.0.0\n */\nfunction delimiter() {\n    return window.__TAURI_INTERNALS__.plugins.path.delimiter;\n}\n/**\n * Resolves a sequence of `paths` or `path` segments into an absolute path.\n * @example\n * ```typescript\n * import { resolve, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await resolve(appDataDirPath, '..', 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function resolve(...paths) {\n    return invoke('plugin:path|resolve', { paths });\n}\n/**\n * Normalizes the given `path`, resolving `'..'` and `'.'` segments and resolve symbolic links.\n * @example\n * ```typescript\n * import { normalize, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await normalize(`${appDataDirPath}/../users/tauri/avatar.png`);\n * ```\n *\n * @since 1.0.0\n */\nasync function normalize(path) {\n    return invoke('plugin:path|normalize', { path });\n}\n/**\n *  Joins all given `path` segments together using the platform-specific separator as a delimiter, then normalizes the resulting path.\n * @example\n * ```typescript\n * import { join, appDataDir } from '@tauri-apps/api/path';\n * const appDataDirPath = await appDataDir();\n * const path = await join(appDataDirPath, 'users', 'tauri', 'avatar.png');\n * ```\n *\n * @since 1.0.0\n */\nasync function join(...paths) {\n    return invoke('plugin:path|join', { paths });\n}\n/**\n * Returns the directory name of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { dirname } from '@tauri-apps/api/path';\n * const dir = await dirname('/path/to/somedir/');\n * assert(dir === 'somedir');\n * ```\n *\n * @since 1.0.0\n */\nasync function dirname(path) {\n    return invoke('plugin:path|dirname', { path });\n}\n/**\n * Returns the extension of the `path`.\n * @example\n * ```typescript\n * import { extname } from '@tauri-apps/api/path';\n * const ext = await extname('/path/to/file.html');\n * assert(ext === 'html');\n * ```\n *\n * @since 1.0.0\n */\nasync function extname(path) {\n    return invoke('plugin:path|extname', { path });\n}\n/**\n * Returns the last portion of a `path`. Trailing directory separators are ignored.\n * @example\n * ```typescript\n * import { basename } from '@tauri-apps/api/path';\n * const base = await basename('path/to/app.conf');\n * assert(base === 'app.conf');\n * ```\n * @param ext An optional file extension to be removed from the returned path.\n *\n * @since 1.0.0\n */\nasync function basename(path, ext) {\n    return invoke('plugin:path|basename', { path, ext });\n}\n/**\n * Returns whether the path is absolute or not.\n * @example\n * ```typescript\n * import { isAbsolute } from '@tauri-apps/api/path';\n * assert(await isAbsolute('/home/tauri'));\n * ```\n *\n * @since 1.0.0\n */\nasync function isAbsolute(path) {\n    return invoke('plugin:path|is_absolute', { path });\n}\n\nexport { BaseDirectory, appCacheDir, appConfigDir, appDataDir, appLocalDataDir, appLogDir, audioDir, basename, cacheDir, configDir, dataDir, delimiter, desktopDir, dirname, documentDir, downloadDir, executableDir, extname, fontDir, homeDir, isAbsolute, join, localDataDir, normalize, pictureDir, publicDir, resolve, resolveResource, resourceDir, runtimeDir, sep, tempDir, templateDir, videoDir };\n", "import { Resource, invoke, Channel } from './core.js';\nimport { transformImage } from './image.js';\nimport { PhysicalPosition, PhysicalSize } from './dpi.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Tray icon class and associated methods. This type constructor is private,\n * instead, you should use the static method {@linkcode TrayIcon.new}.\n *\n * #### Warning\n *\n * Unlike Rust, javascript does not have any way to run cleanup code\n * when an object is being removed by garbage collection, but this tray icon\n * will be cleaned up when the tauri app exists, however if you want to cleanup\n * this object early, you need to call {@linkcode TrayIcon.close}.\n *\n * @example\n * ```ts\n * import { TrayIcon } from '@tauri-apps/api/tray';\n * const tray = await TrayIcon.new({ tooltip: 'awesome tray tooltip' });\n * tray.set_tooltip('new tooltip');\n * ```\n */\nclass TrayIcon extends Resource {\n    constructor(rid, id) {\n        super(rid);\n        this.id = id;\n    }\n    /** Gets a tray icon using the provided id. */\n    static async getById(id) {\n        return invoke('plugin:tray|get_by_id', { id }).then((rid) => rid ? new TrayIcon(rid, id) : null);\n    }\n    /**\n     * Removes a tray icon using the provided id from tauri's internal state.\n     *\n     * Note that this may cause the tray icon to disappear\n     * if it wasn't cloned somewhere else or referenced by JS.\n     */\n    static async removeById(id) {\n        return invoke('plugin:tray|remove_by_id', { id });\n    }\n    /**\n     * Creates a new {@linkcode TrayIcon}\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Sometimes the icon won't be visible unless a menu is set.\n     * Setting an empty {@linkcode Menu} is enough.\n     */\n    static async new(options) {\n        if (options === null || options === void 0 ? void 0 : options.menu) {\n            // @ts-expect-error we only need the rid and kind\n            options.menu = [options.menu.rid, options.menu.kind];\n        }\n        if (options === null || options === void 0 ? void 0 : options.icon) {\n            options.icon = transformImage(options.icon);\n        }\n        const handler = new Channel();\n        if (options === null || options === void 0 ? void 0 : options.action) {\n            const action = options.action;\n            handler.onmessage = (e) => action(mapEvent(e));\n            delete options.action;\n        }\n        return invoke('plugin:tray|new', {\n            options: options !== null && options !== void 0 ? options : {},\n            handler\n        }).then(([rid, id]) => new TrayIcon(rid, id));\n    }\n    /**\n     *  Sets a new tray icon. If `null` is provided, it will remove the icon.\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     */\n    async setIcon(icon) {\n        let trayIcon = null;\n        if (icon) {\n            trayIcon = transformImage(icon);\n        }\n        return invoke('plugin:tray|set_icon', { rid: this.rid, icon: trayIcon });\n    }\n    /**\n     * Sets a new tray menu.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: once a menu is set it cannot be removed so `null` has no effect\n     */\n    async setMenu(menu) {\n        if (menu) {\n            // @ts-expect-error we only need the rid and kind\n            menu = [menu.rid, menu.kind];\n        }\n        return invoke('plugin:tray|set_menu', { rid: this.rid, menu });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** Unsupported\n     */\n    async setTooltip(tooltip) {\n        return invoke('plugin:tray|set_tooltip', { rid: this.rid, tooltip });\n    }\n    /**\n     * Sets the tooltip for this tray icon.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux:** The title will not be shown unless there is an icon\n     * as well.  The title is useful for numerical and other frequently\n     * updated information.  In general, it shouldn't be shown unless a\n     * user requests it as it can take up a significant amount of space\n     * on the user's panel.  This may not be shown in all visualizations.\n     * - **Windows:** Unsupported\n     */\n    async setTitle(title) {\n        return invoke('plugin:tray|set_title', { rid: this.rid, title });\n    }\n    /** Show or hide this tray icon. */\n    async setVisible(visible) {\n        return invoke('plugin:tray|set_visible', { rid: this.rid, visible });\n    }\n    /**\n     * Sets the tray icon temp dir path. **Linux only**.\n     *\n     * On Linux, we need to write the icon to the disk and usually it will\n     * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.\n     */\n    async setTempDirPath(path) {\n        return invoke('plugin:tray|set_temp_dir_path', { rid: this.rid, path });\n    }\n    /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */\n    async setIconAsTemplate(asTemplate) {\n        return invoke('plugin:tray|set_icon_as_template', {\n            rid: this.rid,\n            asTemplate\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @deprecated use {@linkcode TrayIcon.setShowMenuOnLeftClick} instead.\n     */\n    async setMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n    /**\n     *  Disable or enable showing the tray menu on left click.\n     *\n     * #### Platform-specific:\n     *\n     * - **Linux**: Unsupported.\n     *\n     * @since 2.2.0\n     */\n    async setShowMenuOnLeftClick(onLeft) {\n        return invoke('plugin:tray|set_show_menu_on_left_click', {\n            rid: this.rid,\n            onLeft\n        });\n    }\n}\nfunction mapEvent(e) {\n    const out = e;\n    out.position = new PhysicalPosition(e.position);\n    out.rect.position = new PhysicalPosition(e.rect.position);\n    out.rect.size = new PhysicalSize(e.rect.size);\n    return out;\n}\n\nexport { TrayIcon };\n", "import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { getCurrentWindow, Window } from './window.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create webviews, communicate with other webviews and manipulate the current webview.\n *\n * #### Webview events\n *\n * Events can be listened to using {@link Webview.listen}:\n * ```typescript\n * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n * getCurrentWebview().listen(\"my-webview-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Get an instance of `Webview` for the current webview.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebview() {\n    return new Webview(getCurrentWindow(), window.__TAURI_INTERNALS__.metadata.currentWebview.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Webview` for all available webviews.\n *\n * @since 2.0.0\n */\nasync function getAllWebviews() {\n    return invoke('plugin:webview|get_all_webviews').then((webviews) => webviews.map((w) => new Webview(new Window(w.windowLabel, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    }), w.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created webview\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new webview or get a handle to an existing one.\n *\n * Webviews are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n * import { Webview } from \"@tauri-apps/api/webview\"\n *\n * const appWindow = new Window('uniqueLabel');\n *\n * // loading embedded asset:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'path/to/page.html'\n * });\n * // alternatively, load a remote URL:\n * const webview = new Webview(appWindow, 'theUniqueLabel', {\n *   url: 'https://github.com/tauri-apps/tauri'\n * });\n *\n * webview.once('tauri://created', function () {\n *  // webview successfully created\n * });\n * webview.once('tauri://error', function (e) {\n *  // an error happened creating the webview\n * });\n *\n * // emit an event to the backend\n * await webview.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await webview.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Webview {\n    /**\n     * Creates a new Webview.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window'\n     * import { Webview } from '@tauri-apps/api/webview'\n     * const appWindow = new Window('my-label')\n     * const webview = new Webview(appWindow, 'my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param window the window to add this webview to.\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Webview} instance to communicate with the webview.\n     */\n    constructor(window, label, options) {\n        this.window = window;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview', {\n                windowLabel: window.label,\n                label,\n                options\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webview';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWebviews()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebview();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviews();\n    }\n    /**\n     * Listen to an emitted event on this webview.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrentWebview().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const unlisten = await getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Webview', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emit('webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().emitTo('main', 'webview-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line security/detect-object-injection\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The position of the top-left hand corner of the webview's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const position = await getCurrentWebview().position();\n     * ```\n     *\n     * @returns The webview's position.\n     */\n    async position() {\n        return invoke('plugin:webview|webview_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the webview's client area.\n     * The client area is the content of the webview, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * const size = await getCurrentWebview().size();\n     * ```\n     *\n     * @returns The webview's size.\n     */\n    async size() {\n        return invoke('plugin:webview|webview_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    // Setters\n    /**\n     * Closes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:webview|webview_close', {\n            label: this.label\n        });\n    }\n    /**\n     * Resizes the webview.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalSize } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:webview|set_webview_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the webview position.\n     * @example\n     * ```typescript\n     * import { getCurrent, LogicalPosition } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:webview|set_webview_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Bring the webview to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:webview|set_webview_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Hide the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:webview|webview_hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Show the webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:webview|webview_show', {\n            label: this.label\n        });\n    }\n    /**\n     * Set webview zoom level.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().setZoom(1.5);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setZoom(scaleFactor) {\n        return invoke('plugin:webview|set_webview_zoom', {\n            label: this.label,\n            value: scaleFactor\n        });\n    }\n    /**\n     * Moves this webview to the given label.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().reparent('other-window');\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async reparent(window) {\n        return invoke('plugin:webview|reparent', {\n            label: this.label,\n            window: typeof window === 'string' ? window : window.label\n        });\n    }\n    /**\n     * Clears all browsing data for this webview.\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from '@tauri-apps/api/webview';\n     * await getCurrentWebview().clearAllBrowsingData();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async clearAllBrowsingData() {\n        return invoke('plugin:webview|clear_all_browsing_data');\n    }\n    /**\n     * Specify the webview background color.\n     *\n     * #### Platfrom-specific:\n     *\n     * - **macOS / iOS**: Not implemented.\n     * - **Windows**:\n     *   - On Windows 7, transparency is not supported and the alpha value will be ignored.\n     *   - On Windows higher than 7: translucent colors are not supported so any alpha value other than `0` will be replaced by `255`\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:webview|set_webview_background_color', { color });\n    }\n    // Listeners\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWebview } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWebview().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * When the debugger panel is open, the drop position of this event may be inaccurate due to a known limitation.\n     * To retrieve the correct drop position, please detach the debugger.\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDragEnter = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragLeave = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDragEnter();\n            unlistenDragDrop();\n            unlistenDragOver();\n            unlistenDragLeave();\n        };\n    }\n}\n\nexport { Webview, getAllWebviews, getCurrentWebview };\n", "import { PhysicalPosition, PhysicalSize, Size, Position } from './dpi.js';\nexport { LogicalPosition, LogicalSize } from './dpi.js';\nimport { listen, once, emit, emitTo, TauriEvent } from './event.js';\nimport { invoke } from './core.js';\nimport { transformImage } from './image.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Provides APIs to create windows, communicate with other windows and manipulate the current window.\n *\n * #### Window events\n *\n * Events can be listened to using {@link Window.listen}:\n * ```typescript\n * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n * getCurrentWindow().listen(\"my-window-event\", ({ event, payload }) => { });\n * ```\n *\n * @module\n */\n/**\n * Attention type to request on a window.\n *\n * @since 1.0.0\n */\nvar UserAttentionType;\n(function (UserAttentionType) {\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon until the application is in focus.\n     * - **Windows:** Flashes both the window and the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Critical\"] = 1] = \"Critical\";\n    /**\n     * #### Platform-specific\n     * - **macOS:** Bounces the dock icon once.\n     * - **Windows:** Flashes the taskbar button until the application is in focus.\n     */\n    UserAttentionType[UserAttentionType[\"Informational\"] = 2] = \"Informational\";\n})(UserAttentionType || (UserAttentionType = {}));\nclass CloseRequestedEvent {\n    constructor(event) {\n        this._preventDefault = false;\n        this.event = event.event;\n        this.id = event.id;\n    }\n    preventDefault() {\n        this._preventDefault = true;\n    }\n    isPreventDefault() {\n        return this._preventDefault;\n    }\n}\nvar ProgressBarStatus;\n(function (ProgressBarStatus) {\n    /**\n     * Hide progress bar.\n     */\n    ProgressBarStatus[\"None\"] = \"none\";\n    /**\n     * Normal state.\n     */\n    ProgressBarStatus[\"Normal\"] = \"normal\";\n    /**\n     * Indeterminate state. **Treated as Normal on Linux and macOS**\n     */\n    ProgressBarStatus[\"Indeterminate\"] = \"indeterminate\";\n    /**\n     * Paused state. **Treated as Normal on Linux**\n     */\n    ProgressBarStatus[\"Paused\"] = \"paused\";\n    /**\n     * Error state. **Treated as Normal on linux**\n     */\n    ProgressBarStatus[\"Error\"] = \"error\";\n})(ProgressBarStatus || (ProgressBarStatus = {}));\n/**\n * Get an instance of `Window` for the current window.\n *\n * @since 1.0.0\n */\nfunction getCurrentWindow() {\n    return new Window(window.__TAURI_INTERNALS__.metadata.currentWindow.label, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    });\n}\n/**\n * Gets a list of instances of `Window` for all available windows.\n *\n * @since 1.0.0\n */\nasync function getAllWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new Window(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n/** @ignore */\n// events that are emitted right here instead of by the created window\nconst localTauriEvents = ['tauri://created', 'tauri://error'];\n/**\n * Create new window or get a handle to an existing one.\n *\n * Windows are identified by a *label*  a unique identifier that can be used to reference it later.\n * It may only contain alphanumeric characters `a-zA-Z` plus the following special characters `-`, `/`, `:` and `_`.\n *\n * @example\n * ```typescript\n * import { Window } from \"@tauri-apps/api/window\"\n *\n * const appWindow = new Window('theUniqueLabel');\n *\n * appWindow.once('tauri://created', function () {\n *  // window successfully created\n * });\n * appWindow.once('tauri://error', function (e) {\n *  // an error happened creating the window\n * });\n *\n * // emit an event to the backend\n * await appWindow.emit(\"some-event\", \"data\");\n * // listen to an event from the backend\n * const unlisten = await appWindow.listen(\"event-name\", e => {});\n * unlisten();\n * ```\n *\n * @since 2.0.0\n */\nclass Window {\n    /**\n     * Creates a new Window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const appWindow = new Window('my-label');\n     * appWindow.once('tauri://created', function () {\n     *  // window successfully created\n     * });\n     * appWindow.once('tauri://error', function (e) {\n     *  // an error happened creating the window\n     * });\n     * ```\n     *\n     * @param label The unique window label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link Window} instance to communicate with the window.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WindowOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:window|create', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Window associated with the given label.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const mainWindow = Window.getByLabel('main');\n     * ```\n     *\n     * @param label The window label.\n     * @returns The Window instance to communicate with the window or null if the window doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        return (_a = (await getAllWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Get an instance of `Window` for the current window.\n     */\n    static getCurrent() {\n        return getCurrentWindow();\n    }\n    /**\n     * Gets a list of instances of `Window` for all available windows.\n     */\n    static async getAll() {\n        return getAllWindows();\n    }\n    /**\n     *  Gets the focused window.\n     * @example\n     * ```typescript\n     * import { Window } from '@tauri-apps/api/window';\n     * const focusedWindow = Window.getFocusedWindow();\n     * ```\n     *\n     * @returns The Window instance or `undefined` if there is not any focused window.\n     */\n    static async getFocusedWindow() {\n        for (const w of await getAllWindows()) {\n            if (await w.isFocused()) {\n                return w;\n            }\n        }\n        return null;\n    }\n    /**\n     * Listen to an emitted event on this window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this window only once.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const unlisten = await getCurrentWindow().once<null>('initialized', (event) => {\n     *   console.log(`Window initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'Window', label: this.label }\n        });\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emit(event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emit(event, payload);\n    }\n    /**\n     * Emits an event to all {@link EventTarget|targets} matching the given target.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().emit('main', 'window-loaded', { loggedIn: true, token: 'authToken' });\n     * ```\n     * @param target Label of the target Window/Webview/WebviewWindow or raw {@link EventTarget} object.\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param payload Event payload.\n     */\n    async emitTo(target, event, payload) {\n        if (localTauriEvents.includes(event)) {\n            // eslint-disable-next-line security/detect-object-injection\n            for (const handler of this.listeners[event] || []) {\n                handler({\n                    event,\n                    id: -1,\n                    payload\n                });\n            }\n            return;\n        }\n        return emitTo(target, event, payload);\n    }\n    /** @ignore */\n    _handleTauriEvent(event, handler) {\n        if (localTauriEvents.includes(event)) {\n            if (!(event in this.listeners)) {\n                // eslint-disable-next-line\n                this.listeners[event] = [handler];\n            }\n            else {\n                // eslint-disable-next-line\n                this.listeners[event].push(handler);\n            }\n            return true;\n        }\n        return false;\n    }\n    // Getters\n    /**\n     * The scale factor that can be used to map physical pixels to logical pixels.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const factor = await getCurrentWindow().scaleFactor();\n     * ```\n     *\n     * @returns The window's monitor scale factor.\n     */\n    async scaleFactor() {\n        return invoke('plugin:window|scale_factor', {\n            label: this.label\n        });\n    }\n    /**\n     * The position of the top-left hand corner of the window's client area relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().innerPosition();\n     * ```\n     *\n     * @returns The window's inner position.\n     */\n    async innerPosition() {\n        return invoke('plugin:window|inner_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The position of the top-left hand corner of the window relative to the top-left hand corner of the desktop.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const position = await getCurrentWindow().outerPosition();\n     * ```\n     *\n     * @returns The window's outer position.\n     */\n    async outerPosition() {\n        return invoke('plugin:window|outer_position', {\n            label: this.label\n        }).then((p) => new PhysicalPosition(p));\n    }\n    /**\n     * The physical size of the window's client area.\n     * The client area is the content of the window, excluding the title bar and borders.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().innerSize();\n     * ```\n     *\n     * @returns The window's inner size.\n     */\n    async innerSize() {\n        return invoke('plugin:window|inner_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * The physical size of the entire window.\n     * These dimensions include the title bar and borders. If you don't want that (and you usually don't), use inner_size instead.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const size = await getCurrentWindow().outerSize();\n     * ```\n     *\n     * @returns The window's outer size.\n     */\n    async outerSize() {\n        return invoke('plugin:window|outer_size', {\n            label: this.label\n        }).then((s) => new PhysicalSize(s));\n    }\n    /**\n     * Gets the window's current fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const fullscreen = await getCurrentWindow().isFullscreen();\n     * ```\n     *\n     * @returns Whether the window is in fullscreen mode or not.\n     */\n    async isFullscreen() {\n        return invoke('plugin:window|is_fullscreen', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current minimized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimized = await getCurrentWindow().isMinimized();\n     * ```\n     */\n    async isMinimized() {\n        return invoke('plugin:window|is_minimized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximized = await getCurrentWindow().isMaximized();\n     * ```\n     *\n     * @returns Whether the window is maximized or not.\n     */\n    async isMaximized() {\n        return invoke('plugin:window|is_maximized', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current focus state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const focused = await getCurrentWindow().isFocused();\n     * ```\n     *\n     * @returns Whether the window is focused or not.\n     */\n    async isFocused() {\n        return invoke('plugin:window|is_focused', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current decorated state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const decorated = await getCurrentWindow().isDecorated();\n     * ```\n     *\n     * @returns Whether the window is decorated or not.\n     */\n    async isDecorated() {\n        return invoke('plugin:window|is_decorated', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current resizable state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const resizable = await getCurrentWindow().isResizable();\n     * ```\n     *\n     * @returns Whether the window is resizable or not.\n     */\n    async isResizable() {\n        return invoke('plugin:window|is_resizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native maximize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const maximizable = await getCurrentWindow().isMaximizable();\n     * ```\n     *\n     * @returns Whether the window's native maximize button is enabled or not.\n     */\n    async isMaximizable() {\n        return invoke('plugin:window|is_maximizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native minimize button state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const minimizable = await getCurrentWindow().isMinimizable();\n     * ```\n     *\n     * @returns Whether the window's native minimize button is enabled or not.\n     */\n    async isMinimizable() {\n        return invoke('plugin:window|is_minimizable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's native close button state.\n     *\n     * #### Platform-specific\n     *\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const closable = await getCurrentWindow().isClosable();\n     * ```\n     *\n     * @returns Whether the window's native close button is enabled or not.\n     */\n    async isClosable() {\n        return invoke('plugin:window|is_closable', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current visible state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const visible = await getCurrentWindow().isVisible();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isVisible() {\n        return invoke('plugin:window|is_visible', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const title = await getCurrentWindow().title();\n     * ```\n     */\n    async title() {\n        return invoke('plugin:window|title', {\n            label: this.label\n        });\n    }\n    /**\n     * Gets the window's current theme.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Theme was introduced on macOS 10.14. Returns `light` on macOS 10.13 and below.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const theme = await getCurrentWindow().theme();\n     * ```\n     *\n     * @returns The window theme.\n     */\n    async theme() {\n        return invoke('plugin:window|theme', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window is configured to be always on top of other windows or not.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * const alwaysOnTop = await getCurrentWindow().isAlwaysOnTop();\n     * ```\n     *\n     * @returns Whether the window is visible or not.\n     */\n    async isAlwaysOnTop() {\n        return invoke('plugin:window|is_always_on_top', {\n            label: this.label\n        });\n    }\n    // Setters\n    /**\n     * Centers the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().center();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async center() {\n        return invoke('plugin:window|center', {\n            label: this.label\n        });\n    }\n    /**\n     *  Requests user attention to the window, this has no effect if the application\n     * is already focused. How requesting for user attention manifests is platform dependent,\n     * see `UserAttentionType` for details.\n     *\n     * Providing `null` will unset the request for user attention. Unsetting the request for\n     * user attention might not be done automatically by the WM when the window receives input.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** `null` has no effect.\n     * - **Linux:** Urgency levels have the same effect.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().requestUserAttention();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async requestUserAttention(requestType) {\n        let requestType_ = null;\n        if (requestType) {\n            if (requestType === UserAttentionType.Critical) {\n                requestType_ = { type: 'Critical' };\n            }\n            else {\n                requestType_ = { type: 'Informational' };\n            }\n        }\n        return invoke('plugin:window|request_user_attention', {\n            label: this.label,\n            value: requestType_\n        });\n    }\n    /**\n     * Updates the window resizable flag.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setResizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setResizable(resizable) {\n        return invoke('plugin:window|set_resizable', {\n            label: this.label,\n            value: resizable\n        });\n    }\n    /**\n     * Enable or disable the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async setEnabled(enabled) {\n        return invoke('plugin:window|set_enabled', {\n            label: this.label,\n            value: enabled\n        });\n    }\n    /**\n     * Whether the window is enabled or disabled.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setEnabled(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.0.0\n     */\n    async isEnabled() {\n        return invoke('plugin:window|is_enabled', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets whether the window's native maximize button is enabled or not.\n     * If resizable is set to false, this setting is ignored.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Disables the \"zoom\" button in the window titlebar, which is also used to enter fullscreen mode.\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaximizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaximizable(maximizable) {\n        return invoke('plugin:window|set_maximizable', {\n            label: this.label,\n            value: maximizable\n        });\n    }\n    /**\n     * Sets whether the window's native minimize button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinimizable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinimizable(minimizable) {\n        return invoke('plugin:window|set_minimizable', {\n            label: this.label,\n            value: minimizable\n        });\n    }\n    /**\n     * Sets whether the window's native close button is enabled or not.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** GTK+ will do its best to convince the window manager not to show a close button. Depending on the system, this function may not have any effect when called on a window that is already visible\n     * - **iOS / Android:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setClosable(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setClosable(closable) {\n        return invoke('plugin:window|set_closable', {\n            label: this.label,\n            value: closable\n        });\n    }\n    /**\n     * Sets the window title.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setTitle('Tauri');\n     * ```\n     *\n     * @param title The new title\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setTitle(title) {\n        return invoke('plugin:window|set_title', {\n            label: this.label,\n            value: title\n        });\n    }\n    /**\n     * Maximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().maximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async maximize() {\n        return invoke('plugin:window|maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unmaximizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unmaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unmaximize() {\n        return invoke('plugin:window|unmaximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Toggles the window maximized state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().toggleMaximize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async toggleMaximize() {\n        return invoke('plugin:window|toggle_maximize', {\n            label: this.label\n        });\n    }\n    /**\n     * Minimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().minimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async minimize() {\n        return invoke('plugin:window|minimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Unminimizes the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().unminimize();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async unminimize() {\n        return invoke('plugin:window|unminimize', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to true.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().show();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async show() {\n        return invoke('plugin:window|show', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window visibility to false.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().hide();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async hide() {\n        return invoke('plugin:window|hide', {\n            label: this.label\n        });\n    }\n    /**\n     * Closes the window.\n     *\n     * Note this emits a closeRequested event so you can intercept it. To force window close, use {@link Window.destroy}.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().close();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async close() {\n        return invoke('plugin:window|close', {\n            label: this.label\n        });\n    }\n    /**\n     * Destroys the window. Behaves like {@link Window.close} but forces the window close instead of emitting a closeRequested event.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().destroy();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async destroy() {\n        return invoke('plugin:window|destroy', {\n            label: this.label\n        });\n    }\n    /**\n     * Whether the window should have borders and bars.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setDecorations(false);\n     * ```\n     *\n     * @param decorations Whether the window should have borders and bars.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setDecorations(decorations) {\n        return invoke('plugin:window|set_decorations', {\n            label: this.label,\n            value: decorations\n        });\n    }\n    /**\n     * Whether or not the window should have shadow.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:**\n     *   - `false` has no effect on decorated window, shadows are always ON.\n     *   - `true` will make undecorated window have a 1px white border,\n     * and on Windows 11, it will have a rounded corners.\n     * - **Linux:** Unsupported.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setShadow(false);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setShadow(enable) {\n        return invoke('plugin:window|set_shadow', {\n            label: this.label,\n            value: enable\n        });\n    }\n    /**\n     * Set window effects.\n     */\n    async setEffects(effects) {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: effects\n        });\n    }\n    /**\n     * Clear any applied effects if possible.\n     */\n    async clearEffects() {\n        return invoke('plugin:window|set_effects', {\n            label: this.label,\n            value: null\n        });\n    }\n    /**\n     * Whether the window should always be on top of other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnTop(true);\n     * ```\n     *\n     * @param alwaysOnTop Whether the window should always be on top of other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnTop(alwaysOnTop) {\n        return invoke('plugin:window|set_always_on_top', {\n            label: this.label,\n            value: alwaysOnTop\n        });\n    }\n    /**\n     * Whether the window should always be below other windows.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setAlwaysOnBottom(true);\n     * ```\n     *\n     * @param alwaysOnBottom Whether the window should always be below other windows or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setAlwaysOnBottom(alwaysOnBottom) {\n        return invoke('plugin:window|set_always_on_bottom', {\n            label: this.label,\n            value: alwaysOnBottom\n        });\n    }\n    /**\n     * Prevents the window contents from being captured by other apps.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setContentProtected(true);\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setContentProtected(protected_) {\n        return invoke('plugin:window|set_content_protected', {\n            label: this.label,\n            value: protected_\n        });\n    }\n    /**\n     * Resizes the window with a new inner size.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSize(size) {\n        return invoke('plugin:window|set_size', {\n            label: this.label,\n            value: size instanceof Size ? size : new Size(size)\n        });\n    }\n    /**\n     * Sets the window minimum inner size. If the `size` argument is not provided, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, PhysicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMinSize(new PhysicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMinSize(size) {\n        return invoke('plugin:window|set_min_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window maximum inner size. If the `size` argument is undefined, the constraint is unset.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalSize } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setMaxSize(new LogicalSize(600, 500));\n     * ```\n     *\n     * @param size The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setMaxSize(size) {\n        return invoke('plugin:window|set_max_size', {\n            label: this.label,\n            value: size instanceof Size ? size : size ? new Size(size) : null\n        });\n    }\n    /**\n     * Sets the window inner size constraints.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSizeConstraints({ minWidth: 300 });\n     * ```\n     *\n     * @param constraints The logical or physical inner size, or `null` to unset the constraint.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSizeConstraints(constraints) {\n        function logical(pixel) {\n            return pixel ? { Logical: pixel } : null;\n        }\n        return invoke('plugin:window|set_size_constraints', {\n            label: this.label,\n            value: {\n                minWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minWidth),\n                minHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.minHeight),\n                maxWidth: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxWidth),\n                maxHeight: logical(constraints === null || constraints === void 0 ? void 0 : constraints.maxHeight)\n            }\n        });\n    }\n    /**\n     * Sets the window outer position.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setPosition(new LogicalPosition(600, 500));\n     * ```\n     *\n     * @param position The new position, in logical or physical pixels.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setPosition(position) {\n        return invoke('plugin:window|set_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Sets the window fullscreen state.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFullscreen(true);\n     * ```\n     *\n     * @param fullscreen Whether the window should go to fullscreen or not.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFullscreen(fullscreen) {\n        return invoke('plugin:window|set_fullscreen', {\n            label: this.label,\n            value: fullscreen\n        });\n    }\n    /**\n     * Bring the window to front and focus.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setFocus();\n     * ```\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setFocus() {\n        return invoke('plugin:window|set_focus', {\n            label: this.label\n        });\n    }\n    /**\n     * Sets the window icon.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIcon('/tauri/awesome.png');\n     * ```\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIcon(icon) {\n        return invoke('plugin:window|set_icon', {\n            label: this.label,\n            value: transformImage(icon)\n        });\n    }\n    /**\n     * Whether the window icon should be hidden from the taskbar or not.\n     *\n     * #### Platform-specific\n     *\n     * - **macOS:** Unsupported.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setSkipTaskbar(true);\n     * ```\n     *\n     * @param skip true to hide window icon, false to show it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setSkipTaskbar(skip) {\n        return invoke('plugin:window|set_skip_taskbar', {\n            label: this.label,\n            value: skip\n        });\n    }\n    /**\n     * Grabs the cursor, preventing it from leaving the window.\n     *\n     * There's no guarantee that the cursor will be hidden. You should\n     * hide it by yourself if you want so.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux:** Unsupported.\n     * - **macOS:** This locks the cursor in a fixed location, which looks visually awkward.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorGrab(true);\n     * ```\n     *\n     * @param grab `true` to grab the cursor icon, `false` to release it.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorGrab(grab) {\n        return invoke('plugin:window|set_cursor_grab', {\n            label: this.label,\n            value: grab\n        });\n    }\n    /**\n     * Modifies the cursor's visibility.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows:** The cursor is only hidden within the confines of the window.\n     * - **macOS:** The cursor is hidden as long as the window has input focus, even if the cursor is\n     *   outside of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorVisible(false);\n     * ```\n     *\n     * @param visible If `false`, this will hide the cursor. If `true`, this will show the cursor.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorVisible(visible) {\n        return invoke('plugin:window|set_cursor_visible', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Modifies the cursor icon of the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorIcon('help');\n     * ```\n     *\n     * @param icon The new cursor icon.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorIcon(icon) {\n        return invoke('plugin:window|set_cursor_icon', {\n            label: this.label,\n            value: icon\n        });\n    }\n    /**\n     * Sets the window background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Windows:** alpha channel is ignored.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color });\n    }\n    /**\n     * Changes the position of the cursor in window coordinates.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, LogicalPosition } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setCursorPosition(new LogicalPosition(600, 300));\n     * ```\n     *\n     * @param position The new cursor position.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setCursorPosition(position) {\n        return invoke('plugin:window|set_cursor_position', {\n            label: this.label,\n            value: position instanceof Position ? position : new Position(position)\n        });\n    }\n    /**\n     * Changes the cursor events behavior.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setIgnoreCursorEvents(true);\n     * ```\n     *\n     * @param ignore `true` to ignore the cursor events; `false` to process them as usual.\n     * @returns A promise indicating the success or failure of the operation.\n     */\n    async setIgnoreCursorEvents(ignore) {\n        return invoke('plugin:window|set_ignore_cursor_events', {\n            label: this.label,\n            value: ignore\n        });\n    }\n    /**\n     * Starts dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startDragging() {\n        return invoke('plugin:window|start_dragging', {\n            label: this.label\n        });\n    }\n    /**\n     * Starts resize-dragging the window.\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().startResizeDragging();\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async startResizeDragging(direction) {\n        return invoke('plugin:window|start_resize_dragging', {\n            label: this.label,\n            value: direction\n        });\n    }\n    /**\n     * Sets the badge count. It is app wide and not specific to this window.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows**: Unsupported. Use @{linkcode Window.setOverlayIcon} instead.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeCount(5);\n     * ```\n     *\n     * @param count The badge count. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeCount(count) {\n        return invoke('plugin:window|set_badge_count', {\n            label: this.label,\n            value: count\n        });\n    }\n    /**\n     * Sets the badge cont **macOS only**.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setBadgeLabel(\"Hello\");\n     * ```\n     *\n     * @param label The badge label. Use `undefined` to remove the badge.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setBadgeLabel(label) {\n        return invoke('plugin:window|set_badge_label', {\n            label: this.label,\n            value: label\n        });\n    }\n    /**\n     * Sets the overlay icon. **Windows only**\n     * The overlay icon can be set for every window.\n     *\n     *\n     * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.\n     * To enable it, change your Cargo.toml file:\n     *\n     * ```toml\n     * [dependencies]\n     * tauri = { version = \"...\", features = [\"...\", \"image-png\"] }\n     * ```\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setOverlayIcon(\"/tauri/awesome.png\");\n     * ```\n     *\n     * @param icon Icon bytes or path to the icon file. Use `undefined` to remove the overlay icon.\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setOverlayIcon(icon) {\n        return invoke('plugin:window|set_overlay_icon', {\n            label: this.label,\n            value: icon ? transformImage(icon) : undefined\n        });\n    }\n    /**\n     * Sets the taskbar progress state.\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Progress bar is app-wide and not specific to this window.\n     * - **Linux**: Only supported desktop environments with `libunity` (e.g. GNOME).\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow, ProgressBarStatus } from '@tauri-apps/api/window';\n     * await getCurrentWindow().setProgressBar({\n     *   status: ProgressBarStatus.Normal,\n     *   progress: 50,\n     * });\n     * ```\n     *\n     * @return A promise indicating the success or failure of the operation.\n     */\n    async setProgressBar(state) {\n        return invoke('plugin:window|set_progress_bar', {\n            label: this.label,\n            value: state\n        });\n    }\n    /**\n     * Sets whether the window should be visible on all workspaces or virtual desktops.\n     *\n     * #### Platform-specific\n     *\n     * - **Windows / iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setVisibleOnAllWorkspaces(visible) {\n        return invoke('plugin:window|set_visible_on_all_workspaces', {\n            label: this.label,\n            value: visible\n        });\n    }\n    /**\n     * Sets the title bar style. **macOS only**.\n     *\n     * @since 2.0.0\n     */\n    async setTitleBarStyle(style) {\n        return invoke('plugin:window|set_title_bar_style', {\n            label: this.label,\n            value: style\n        });\n    }\n    /**\n     * Set window theme, pass in `null` or `undefined` to follow system theme\n     *\n     * #### Platform-specific\n     *\n     * - **Linux / macOS**: Theme is app-wide and not specific to this window.\n     * - **iOS / Android:** Unsupported.\n     *\n     * @since 2.0.0\n     */\n    async setTheme(theme) {\n        return invoke('plugin:window|set_theme', {\n            label: this.label,\n            value: theme\n        });\n    }\n    // Listeners\n    /**\n     * Listen to window resize.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onResized(({ payload: size }) => {\n     *  console.log('Window resized', size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onResized(handler) {\n        return this.listen(TauriEvent.WINDOW_RESIZED, (e) => {\n            e.payload = new PhysicalSize(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window move.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onMoved(({ payload: position }) => {\n     *  console.log('Window moved', position);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onMoved(handler) {\n        return this.listen(TauriEvent.WINDOW_MOVED, (e) => {\n            e.payload = new PhysicalPosition(e.payload);\n            handler(e);\n        });\n    }\n    /**\n     * Listen to window close requested. Emitted when the user requests to closes the window.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * import { confirm } from '@tauri-apps/api/dialog';\n     * const unlisten = await getCurrentWindow().onCloseRequested(async (event) => {\n     *   const confirmed = await confirm('Are you sure?');\n     *   if (!confirmed) {\n     *     // user did not confirm closing the window; let's prevent it\n     *     event.preventDefault();\n     *   }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onCloseRequested(handler) {\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        return this.listen(TauriEvent.WINDOW_CLOSE_REQUESTED, async (event) => {\n            const evt = new CloseRequestedEvent(event);\n            await handler(evt);\n            if (!evt.isPreventDefault()) {\n                await this.destroy();\n            }\n        });\n    }\n    /**\n     * Listen to a file drop event.\n     * The listener is triggered when the user hovers the selected files on the webview,\n     * drops the files or cancels the operation.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/webview\";\n     * const unlisten = await getCurrentWindow().onDragDropEvent((event) => {\n     *  if (event.payload.type === 'over') {\n     *    console.log('User hovering', event.payload.position);\n     *  } else if (event.payload.type === 'drop') {\n     *    console.log('User dropped', event.payload.paths);\n     *  } else {\n     *    console.log('File drop cancelled');\n     *  }\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onDragDropEvent(handler) {\n        const unlistenDrag = await this.listen(TauriEvent.DRAG_ENTER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'enter',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDragOver = await this.listen(TauriEvent.DRAG_OVER, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'over',\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenDrop = await this.listen(TauriEvent.DRAG_DROP, (event) => {\n            handler({\n                ...event,\n                payload: {\n                    type: 'drop',\n                    paths: event.payload.paths,\n                    position: new PhysicalPosition(event.payload.position)\n                }\n            });\n        });\n        const unlistenCancel = await this.listen(TauriEvent.DRAG_LEAVE, (event) => {\n            handler({ ...event, payload: { type: 'leave' } });\n        });\n        return () => {\n            unlistenDrag();\n            unlistenDrop();\n            unlistenDragOver();\n            unlistenCancel();\n        };\n    }\n    /**\n     * Listen to window focus change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onFocusChanged(({ payload: focused }) => {\n     *  console.log('Focus changed, window is focused? ' + focused);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onFocusChanged(handler) {\n        const unlistenFocus = await this.listen(TauriEvent.WINDOW_FOCUS, (event) => {\n            handler({ ...event, payload: true });\n        });\n        const unlistenBlur = await this.listen(TauriEvent.WINDOW_BLUR, (event) => {\n            handler({ ...event, payload: false });\n        });\n        return () => {\n            unlistenFocus();\n            unlistenBlur();\n        };\n    }\n    /**\n     * Listen to window scale change. Emitted when the window's scale factor has changed.\n     * The following user actions can cause DPI changes:\n     * - Changing the display's resolution.\n     * - Changing the display's scale factor (e.g. in Control Panel on Windows).\n     * - Moving the window to a display with a different scale factor.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onScaleChanged(({ payload }) => {\n     *  console.log('Scale changed', payload.scaleFactor, payload.size);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onScaleChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_SCALE_FACTOR_CHANGED, handler);\n    }\n    /**\n     * Listen to the system theme change.\n     *\n     * @example\n     * ```typescript\n     * import { getCurrentWindow } from \"@tauri-apps/api/window\";\n     * const unlisten = await getCurrentWindow().onThemeChanged(({ payload: theme }) => {\n     *  console.log('New theme: ' + theme);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async onThemeChanged(handler) {\n        return this.listen(TauriEvent.WINDOW_THEME_CHANGED, handler);\n    }\n}\n/**\n * Background throttling policy\n *\n * @since 2.0.0\n */\nvar BackgroundThrottlingPolicy;\n(function (BackgroundThrottlingPolicy) {\n    BackgroundThrottlingPolicy[\"Disabled\"] = \"disabled\";\n    BackgroundThrottlingPolicy[\"Throttle\"] = \"throttle\";\n    BackgroundThrottlingPolicy[\"Suspend\"] = \"suspend\";\n})(BackgroundThrottlingPolicy || (BackgroundThrottlingPolicy = {}));\n/**\n * Platform-specific window effects\n *\n * @since 2.0.0\n */\nvar Effect;\n(function (Effect) {\n    /**\n     * A default material appropriate for the view's effectiveAppearance.  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. You should instead choose an appropriate semantic material.\n     */\n    Effect[\"AppearanceBased\"] = \"appearanceBased\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Light\"] = \"light\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"Dark\"] = \"dark\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"MediumLight\"] = \"mediumLight\";\n    /**\n     *  **macOS 10.14-**\n     *\n     * @deprecated since macOS 10.14. Use a semantic material instead.\n     */\n    Effect[\"UltraDark\"] = \"ultraDark\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Titlebar\"] = \"titlebar\";\n    /**\n     *  **macOS 10.10+**\n     */\n    Effect[\"Selection\"] = \"selection\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Menu\"] = \"menu\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Popover\"] = \"popover\";\n    /**\n     *  **macOS 10.11+**\n     */\n    Effect[\"Sidebar\"] = \"sidebar\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HeaderView\"] = \"headerView\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Sheet\"] = \"sheet\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"WindowBackground\"] = \"windowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"HudWindow\"] = \"hudWindow\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"FullScreenUI\"] = \"fullScreenUI\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"Tooltip\"] = \"tooltip\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"ContentBackground\"] = \"contentBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderWindowBackground\"] = \"underWindowBackground\";\n    /**\n     *  **macOS 10.14+**\n     */\n    Effect[\"UnderPageBackground\"] = \"underPageBackground\";\n    /**\n     *  **Windows 11 Only**\n     */\n    Effect[\"Mica\"] = \"mica\";\n    /**\n     * **Windows 7/10/11(22H1) Only**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 11 build 22621.\n     */\n    Effect[\"Blur\"] = \"blur\";\n    /**\n     * **Windows 10/11**\n     *\n     * #### Notes\n     *\n     * This effect has bad performance when resizing/dragging the window on Windows 10 v1903+ and Windows 11 build 22000.\n     */\n    Effect[\"Acrylic\"] = \"acrylic\";\n    /**\n     * Tabbed effect that matches the system dark perefence **Windows 11 Only**\n     */\n    Effect[\"Tabbed\"] = \"tabbed\";\n    /**\n     * Tabbed effect with dark mode but only if dark mode is enabled on the system **Windows 11 Only**\n     */\n    Effect[\"TabbedDark\"] = \"tabbedDark\";\n    /**\n     * Tabbed effect with light mode **Windows 11 Only**\n     */\n    Effect[\"TabbedLight\"] = \"tabbedLight\";\n})(Effect || (Effect = {}));\n/**\n * Window effect state **macOS only**\n *\n * @see https://developer.apple.com/documentation/appkit/nsvisualeffectview/state\n *\n * @since 2.0.0\n */\nvar EffectState;\n(function (EffectState) {\n    /**\n     *  Make window effect state follow the window's active state **macOS only**\n     */\n    EffectState[\"FollowsWindowActiveState\"] = \"followsWindowActiveState\";\n    /**\n     *  Make window effect state always active **macOS only**\n     */\n    EffectState[\"Active\"] = \"active\";\n    /**\n     *  Make window effect state always inactive **macOS only**\n     */\n    EffectState[\"Inactive\"] = \"inactive\";\n})(EffectState || (EffectState = {}));\nfunction mapMonitor(m) {\n    return m === null\n        ? null\n        : {\n            name: m.name,\n            scaleFactor: m.scaleFactor,\n            position: new PhysicalPosition(m.position),\n            size: new PhysicalSize(m.size)\n        };\n}\n/**\n * Returns the monitor on which the window currently resides.\n * Returns `null` if current monitor can't be detected.\n * @example\n * ```typescript\n * import { currentMonitor } from '@tauri-apps/api/window';\n * const monitor = currentMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function currentMonitor() {\n    return invoke('plugin:window|current_monitor').then(mapMonitor);\n}\n/**\n * Returns the primary monitor of the system.\n * Returns `null` if it can't identify any monitor as a primary one.\n * @example\n * ```typescript\n * import { primaryMonitor } from '@tauri-apps/api/window';\n * const monitor = primaryMonitor();\n * ```\n *\n * @since 1.0.0\n */\nasync function primaryMonitor() {\n    return invoke('plugin:window|primary_monitor').then(mapMonitor);\n}\n/**\n * Returns the monitor that contains the given point. Returns `null` if can't find any.\n * @example\n * ```typescript\n * import { monitorFromPoint } from '@tauri-apps/api/window';\n * const monitor = monitorFromPoint();\n * ```\n *\n * @since 1.0.0\n */\nasync function monitorFromPoint(x, y) {\n    return invoke('plugin:window|monitor_from_point', {\n        x,\n        y\n    }).then(mapMonitor);\n}\n/**\n * Returns the list of all the monitors available on the system.\n * @example\n * ```typescript\n * import { availableMonitors } from '@tauri-apps/api/window';\n * const monitors = availableMonitors();\n * ```\n *\n * @since 1.0.0\n */\nasync function availableMonitors() {\n    return invoke('plugin:window|available_monitors').then((ms) => ms.map(mapMonitor));\n}\n/**\n * Get the cursor position relative to the top-left hand corner of the desktop.\n *\n * Note that the top-left hand corner of the desktop is not necessarily the same as the screen.\n * If the user uses a desktop with multiple monitors,\n * the top-left hand corner of the desktop is the top-left hand corner of the main monitor on Windows and macOS\n * or the top-left of the leftmost monitor on X11.\n *\n * The coordinates can be negative if the top-left hand corner of the window is outside of the visible screen region.\n */\nasync function cursorPosition() {\n    return invoke('plugin:window|cursor_position').then((v) => new PhysicalPosition(v));\n}\n\nexport { CloseRequestedEvent, Effect, EffectState, PhysicalPosition, PhysicalSize, ProgressBarStatus, UserAttentionType, Window, availableMonitors, currentMonitor, cursorPosition, getAllWindows, getCurrentWindow, monitorFromPoint, primaryMonitor };\n", "import { getCurrentWebview, Webview } from './webview.js';\nimport { Window } from './window.js';\nimport { listen, once } from './event.js';\nimport { invoke } from './core.js';\n\n// Copyright 2019-2024 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Get an instance of `Webview` for the current webview window.\n *\n * @since 2.0.0\n */\nfunction getCurrentWebviewWindow() {\n    const webview = getCurrentWebview();\n    // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n    return new WebviewWindow(webview.label, { skip: true });\n}\n/**\n * Gets a list of instances of `Webview` for all available webview windows.\n *\n * @since 2.0.0\n */\nasync function getAllWebviewWindows() {\n    return invoke('plugin:window|get_all_windows').then((windows) => windows.map((w) => new WebviewWindow(w, {\n        // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n        skip: true\n    })));\n}\n// eslint-disable-next-line @typescript-eslint/no-unsafe-declaration-merging\nclass WebviewWindow {\n    /**\n     * Creates a new {@link Window} hosting a {@link Webview}.\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow'\n     * const webview = new WebviewWindow('my-label', {\n     *   url: 'https://github.com/tauri-apps/tauri'\n     * });\n     * webview.once('tauri://created', function () {\n     *  // webview successfully created\n     * });\n     * webview.once('tauri://error', function (e) {\n     *  // an error happened creating the webview\n     * });\n     * ```\n     *\n     * @param label The unique webview label. Must be alphanumeric: `a-zA-Z-/:_`.\n     * @returns The {@link WebviewWindow} instance to communicate with the window and webview.\n     */\n    constructor(label, options = {}) {\n        var _a;\n        this.label = label;\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this.listeners = Object.create(null);\n        // @ts-expect-error `skip` is not a public API so it is not defined in WebviewOptions\n        if (!(options === null || options === void 0 ? void 0 : options.skip)) {\n            invoke('plugin:webview|create_webview_window', {\n                options: {\n                    ...options,\n                    parent: typeof options.parent === 'string'\n                        ? options.parent\n                        : (_a = options.parent) === null || _a === void 0 ? void 0 : _a.label,\n                    label\n                }\n            })\n                .then(async () => this.emit('tauri://created'))\n                .catch(async (e) => this.emit('tauri://error', e));\n        }\n    }\n    /**\n     * Gets the Webview for the webview associated with the given label.\n     * @example\n     * ```typescript\n     * import { Webview } from '@tauri-apps/api/webviewWindow';\n     * const mainWebview = Webview.getByLabel('main');\n     * ```\n     *\n     * @param label The webview label.\n     * @returns The Webview instance to communicate with the webview or null if the webview doesn't exist.\n     */\n    static async getByLabel(label) {\n        var _a;\n        const webview = (_a = (await getAllWebviewWindows()).find((w) => w.label === label)) !== null && _a !== void 0 ? _a : null;\n        if (webview) {\n            // @ts-expect-error `skip` is not defined in the public API but it is handled by the constructor\n            return new WebviewWindow(webview.label, { skip: true });\n        }\n        return null;\n    }\n    /**\n     * Get an instance of `Webview` for the current webview.\n     */\n    static getCurrent() {\n        return getCurrentWebviewWindow();\n    }\n    /**\n     * Gets a list of instances of `Webview` for all available webviews.\n     */\n    static async getAll() {\n        return getAllWebviewWindows();\n    }\n    /**\n     * Listen to an emitted event on this webivew window.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().listen<string>('state-changed', (event) => {\n     *   console.log(`Got error: ${payload}`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async listen(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return listen(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Listen to an emitted event on this webview window only once.\n     *\n     * @example\n     * ```typescript\n     * import { WebviewWindow } from '@tauri-apps/api/webviewWindow';\n     * const unlisten = await WebviewWindow.getCurrent().once<null>('initialized', (event) => {\n     *   console.log(`Webview initialized!`);\n     * });\n     *\n     * // you need to call unlisten if your handler goes out of scope e.g. the component is unmounted\n     * unlisten();\n     * ```\n     *\n     * @param event Event name. Must include only alphanumeric characters, `-`, `/`, `:` and `_`.\n     * @param handler Event handler.\n     * @returns A promise resolving to a function to unlisten to the event.\n     * Note that removing the listener is required if your listener goes out of scope e.g. the component is unmounted.\n     */\n    async once(event, handler) {\n        if (this._handleTauriEvent(event, handler)) {\n            return () => {\n                // eslint-disable-next-line security/detect-object-injection\n                const listeners = this.listeners[event];\n                listeners.splice(listeners.indexOf(handler), 1);\n            };\n        }\n        return once(event, handler, {\n            target: { kind: 'WebviewWindow', label: this.label }\n        });\n    }\n    /**\n     * Set the window and webview background color.\n     *\n     * #### Platform-specific:\n     *\n     * - **Android / iOS:** Unsupported for the window layer.\n     * - **macOS / iOS**: Not implemented for the webview layer.\n     * - **Windows**:\n     *   - alpha channel is ignored for the window layer.\n     *   - On Windows 7, alpha channel is ignored for the webview layer.\n     *   - On Windows 8 and newer, if alpha channel is not `0`, it will be ignored.\n     *\n     * @returns A promise indicating the success or failure of the operation.\n     *\n     * @since 2.1.0\n     */\n    async setBackgroundColor(color) {\n        return invoke('plugin:window|set_background_color', { color }).then(() => {\n            return invoke('plugin:webview|set_webview_background_color', { color });\n        });\n    }\n}\n// Order matters, we use window APIs by default\napplyMixins(WebviewWindow, [Window, Webview]);\n/** Extends a base class by other specified classes, without overriding existing properties */\nfunction applyMixins(baseClass, extendedClasses) {\n    (Array.isArray(extendedClasses)\n        ? extendedClasses\n        : [extendedClasses]).forEach((extendedClass) => {\n        Object.getOwnPropertyNames(extendedClass.prototype).forEach((name) => {\n            var _a;\n            if (typeof baseClass.prototype === 'object'\n                && baseClass.prototype\n                && name in baseClass.prototype)\n                return;\n            Object.defineProperty(baseClass.prototype, name, \n            // eslint-disable-next-line\n            (_a = Object.getOwnPropertyDescriptor(extendedClass.prototype, name)) !== null && _a !== void 0 ? _a : Object.create(null));\n        });\n    });\n}\n\nexport { WebviewWindow, getAllWebviewWindows, getCurrentWebviewWindow };\n"],
  "mappings": "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",
  "names": ["TauriEvent", "NativeIcon", "window", "window", "transformCallback", "once", "BaseDirectory", "UserAttentionType", "ProgressBarStatus", "BackgroundThrottlingPolicy", "Effect", "EffectState", "localTauriEvents", "window"]
}
